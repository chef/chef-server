<% unless node['private_chef']['nginx']['nginx_no_root'] %>
user <%= node['private_chef']['user']['username'] %> <%= node['private_chef']['user']['username']%>;
<% end %>
worker_processes <%= @worker_processes %>;
error_log /var/log/<%= ChefUtils::Dist::Org::LEGACY_CONF_DIR %>/nginx/error.log<%= node['private_chef']['lb']['debug'] ? " debug" : "" %>;
# Enviroment variables that we wish to access while running must be declared here,
# otherwise they will not be available.
env REDIS_PASSWORD;
env DATA_COLLECTOR_TOKEN;
daemon off;

events {
  worker_connections <%= @worker_connections %>;
}

http {
  server_tokens off;

<% if node['private_chef']['nginx']['log_x_forwarded_for'] -%>
  log_format <%= ChefUtils::Dist::Org::LEGACY_CONF_DIR %> ' $http_x_forwarded_for- $remote_user [$<%= @helper.time_format %>]  '
<% else -%>
  log_format <%= ChefUtils::Dist::Org::LEGACY_CONF_DIR %> '$remote_addr - $remote_user [$<%= @helper.time_format %>]  '
<% end -%>
                    '"$request" $status "$request_time" $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" "$upstream_addr" "$upstream_status" "$upstream_response_time" "$http_x_chef_version" "$http_x_ops_sign" "$http_x_ops_userid" "$http_x_ops_timestamp" "$http_x_ops_content_hash" $request_length "$http_x_remote_request_id"';

  # In the Chef API a 404 is not an error. These 404s will still be
  # logged to the request log.
  log_not_found off;

  error_page 301 400 401 402 403 405 406 407 408 409 410 411 412 413 414 415 416 417
      418 421 422 423 424 425 426 428 429 431 451 500 501 502 504 505 506 507 508 510 511 = @errorrespfilter;
  server_names_hash_bucket_size <%= @server_names_hash_bucket_size %>;

  sendfile <%= @sendfile %>;
  tcp_nopush <%= @tcp_nopush %>;
  tcp_nodelay <%= @tcp_nodelay %>;

  keepalive_timeout <%= @keepalive_timeout %>;

  gzip <%= @gzip %>;
  gzip_http_version <%= @gzip_http_version %>;
  gzip_comp_level <%= @gzip_comp_level %>;
  gzip_proxied <%= @gzip_proxied %>;
  gzip_types <%= @gzip_types.join(' ') %>;

  include /opt/<%= ChefUtils::Dist::Org::LEGACY_CONF_DIR %>/embedded/conf/mime.types;

  lua_package_path "<%=@script_path %>/?.lua;$prefix/?.lua;;";
  lua_shared_dict maint_data 1m;
  lua_shared_dict banned_ips 1m;

  # Preload some shared modules globally
  init_by_lua '
    redis = require("resty/redis")
    config = require("config")
    routes = require("routes")
    resolver = require("resolver")
    route_checks = require("route_checks")
    validator = require("validator")

    config.set_maint_refresh_interval(<%=@maint_refresh_interval%>)
    config.set_ban_refresh_interval(<%=@ban_refresh_interval%>)
    config.set_default_org(<%= @helper.default_orgname %>)
  ';

  <%- if node['private_chef']['nginx']['enable_stub_status'] -%>
  # Listen for local requests to the stub_status module.
  server {
    listen <%= node['private_chef']['nginx']['stub_status']['listen_host'] %>:<%= node['private_chef']['nginx']['stub_status']['listen_port'] %>;
    location <%= node['private_chef']['nginx']['stub_status']['location'] %> {
      stub_status on;
      access_log   off;
      <%- node['private_chef']['nginx']['stub_status']['allow_list'].each do |allowed| -%>
      allow <%= allowed %>;
      <%- end -%>
      deny all;
    }
  }
  <%- end -%>

  <%- node['private_chef']['lb']['upstream'].each do |uname, servers| -%>
  upstream <%= uname.sub(/-/, '_') %> {
    <%- servers.each do |server| -%>
    server <%= server %>:<%= node['private_chef'][uname]['port'] %>;
    <%- end -%>
  }
  <%- end -%>

  <% if node['private_chef']['data_collector']['root_url'] -%>
  upstream data-collector {
    server <%= URI.parse(node['private_chef']['data_collector']['root_url']).host %>:<%= URI.parse(node['private_chef']['data_collector']['root_url']).port %>;
  }
  <% end -%>

  <% if node['private_chef']['profiles']['root_url'] -%>
  upstream compliance-profiles {
    server <%= URI.parse(node['private_chef']['profiles']['root_url']).host %>:<%= URI.parse(node['private_chef']['profiles']['root_url']).port %>;
  }
  <% end -%>

  # Include upstream definitions for addons
  include <%= node['private_chef']['nginx']['dir'] %>/etc/addon.d/*_upstreams.conf;

  <% # Delete the temp path entry below if/when the associated module is excluded
     # from our openresty builds %>
  fastcgi_temp_path "<%= @temp_dir %>/fastcgi";
  client_body_temp_path "<%= @temp_dir %>/client_body";
  uwsgi_temp_path "<%= @temp_dir %>/uwsgi";
  scgi_temp_path "<%= @temp_dir %>/scgi";

  # external lb config for Chef API
  <%- if node['private_chef']['lb']['enable'] -%>
    proxy_cache_path  <%= File.join(@dir, "cache", "webui") %> levels=1:2 keys_zone=webui-cache:50m max_size=<%= @cache_max_size %> inactive=600m;
    proxy_cache_path  <%= File.join(@dir, "cache", "cookbooks") %> levels=1:2 keys_zone=cookbooks:50m max_size=<%= @cache_max_size %> inactive=600m;
    proxy_temp_path <%= File.join(@dir, "cache-tmp") %>;

    <%- if @strict_host_header %>
    # Reject requests with unknown Host header
      <%- if @non_ssl_port %>
    server {
      listen <%= @non_ssl_port %> default_server;
      server_name _;
      return 404;
    }
      <%- end %>

    server {
      listen <%= @ssl_port %> ssl;

      ssl_certificate <%= @ssl_certificate %>;
      ssl_certificate_key <%= @ssl_certificate_key %>;
      ssl_session_timeout 5m;
      ssl_protocols <%= @ssl_protocols %>;
      ssl_ciphers <%= @ssl_ciphers %>;
      ssl_prefer_server_ciphers on;

      server_name _;
      return 404;
  }
  <% end -%>

    # We support three options: serve nothing on non_ssl_port (80),
    # redirect to https, or actually serve the API.
    <%- if @non_ssl_port -%>
      <%- if @enable_non_ssl -%>
        include <%= @chef_http_config %>;
      <%- else -%>
          server {
            <%= @helper.listen_port('http') %>
            server_name <%= @helper.server_name %>;
            more_clear_headers Server;
            access_log /var/log/<%= ChefUtils::Dist::Org::LEGACY_CONF_DIR %>/nginx/rewrite-port-80.log;
            return 301 https://$host$request_uri;
            location @errorrespfilter {
              return 301 https://$host$request_uri;
              header_filter_by_lua_block { ngx.header.content_length = nil }
              body_filter_by_lua '
              ngx.arg[1] = ngx.re.sub(ngx.arg[1],"openresty", "")
              ';
            }
          }
      <%- end -%>
    <%-  end %>

    # Chef HTTPS API
    include <%= @chef_https_config %>;
  <%- end -%>

  # internal lb config for Chef API Services
  <%- if node['private_chef']['lb_internal']['enable'] -%>
  server {
    <%= @helper.listen_port(node['private_chef']['lb_internal']['chef_port']) %>
    server_name <%= @helper.server_name %>;
    more_clear_headers Server;

    client_max_body_size <%= @client_max_body_size %>;
    proxy_set_header        Host            $host;
    proxy_set_header        X-Real-IP       $remote_addr;
    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header        X-Forwarded-Proto http;
    proxy_set_header        X-Forwarded-Host $http_host;
    proxy_pass_request_headers on;
    proxy_connect_timeout   90;
    proxy_send_timeout      90;
    proxy_read_timeout      90;

    access_log /var/log/<%= ChefUtils::Dist::Org::LEGACY_CONF_DIR %>/nginx/internal-chef.access.log <%= ChefUtils::Dist::Org::LEGACY_CONF_DIR %>;
    error_log  /var/log/<%= ChefUtils::Dist::Org::LEGACY_CONF_DIR %>/nginx/internal-chef.error.log<%= node['private_chef']['lb']['debug'] ? " debug" : "" %>;

    # Include internal routes for addons
    include <%= node['private_chef']['nginx']['dir'] %>/etc/addon.d/*_internal.conf;

    location "/" {
      set $upstream "";
      set $mode "internal_chef";
      rewrite_by_lua_file '<%=@script_path%>/dispatch.lua';

      proxy_redirect http://$upstream /;
      proxy_pass http://$upstream;
    }
  }

  <%- end -%>

  include <%= node['private_chef']['nginx']['dir'] %>/etc/nginx.d/*.conf;
}
