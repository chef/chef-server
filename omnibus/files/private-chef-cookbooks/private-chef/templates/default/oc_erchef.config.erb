%% -*- mode: erlang -*-
%% -*- tab-width: 4;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ts=4 sw=4 ft=eruby.erlang et
[
    {kernel, [{inet_dist_use_interface, {127,0,0,1}}]},
    %% SASL config

    {sasl, [
        {sasl_error_logger, {file, "<%= File.join(@log_directory, 'sasl-error.log') %>"}},
        {errlog_type, error},
        {error_logger_mf_dir, "<%= File.join(@log_directory, 'sasl') %>"},      % Log directory
        {error_logger_mf_maxbytes, <%= @log_rotation['file_maxbytes'] %>},
        {error_logger_mf_maxfiles, <%= @log_rotation['num_to_keep'] %>}
    ]},

    {lager, [
        {handlers, [
            {lager_console_backend, [info, {lager_default_formatter, [ "[", severity, "] ", message, "\n"]}]},
            {lager_file_backend, [
                {file, "<%= File.join(@log_directory, 'erchef.log') %>"},
                {level, info},
                {size, <%= @log_rotation['file_maxbytes'] %>},
                {date, "$D0"},
                {count, <%= @log_rotation['num_to_keep'] %>},
                {formatter_config, [date, " ", time, " [", severity, "] ", message, "\n"]}
            ]}
        ]},

        %% Whether to write a crash log, and where.
        %% Commented/omitted/undefined means no crash logger.
        {crash_log, "<%= File.join(@log_directory, 'crash.log') %>"},

        %% Maximum size in bytes of events in the crash log - defaults to 65536
        {crash_log_msg_size, 65536},

        %% Maximum size of the crash log in bytes, before its rotated, set
        %% to 0 to disable rotation - default is 0
        {crash_log_size, <%= @log_rotation['file_maxbytes'] %>},

        %% What time to rotate the crash log - default is no time
        %% rotation. See the lager README for a description of this format:
        %% https://github.com/basho/lager/blob/master/README.org
        {crash_log_date, "$D0"},

        %% Number of rotated crash logs to keep, 0 means keep only the
        %% current one - default is 0
        {crash_log_count, <%= @log_rotation['num_to_keep'] %>},

        %% Whether to redirect error_logger messages into lager - defaults to true
        {error_logger_redirect, true},

        %% Bump up the "high-water mark" (default 50), which is the
        %% number of messages per second allowed to come from
        %% error_logger.  This is the same as used by
        %% opscode-chef-mover, FWIW.
        {error_logger_hwm, <%= @log_rotation['max_messages_per_second'] %>}
    ]},

    {chef_secrets, [
        {provider, chef_secrets_json_file},
        %% TODO: don't hard code this path
        {provider_config, [{secrets_file, "/etc/opscode/private-chef-secrets.json"}]}
    ]},

    {oc_chef_wm, [
        {ip_mode, [ <%=PrivateChef['use_ipv6'] ? "ipv6,ipv4" : "ipv4" %> ] },
        {api_version, "<%= node['private_chef']['api_version'] %>"},
        {server_flavor, "<%= node['private_chef']['flavor'] %>"},

        {default_orgname, <%= node['private_chef']['default_orgname'] ? "<<\"#{node['private_chef']['default_orgname']}\">>" : "undefined" %> },

        {ip, "<%= @listen %>"},
        {port, <%= @port %>},
        {reqid_header_name, "X-Request-Id"},
        {auth_skew, <%= @auth_skew %>},
        %% currently only used by the search endpoint to bound
        %% how many nodes are deserialized at a time in
        %% preparing a response.
        {bulk_fetch_batch_size, <%= @bulk_fetch_batch_size %>},
        {superusers, [<<"pivotal">>]},
        %% metrics config
        {root_metric_key, "<%= @root_metric_key %>"},

        {authz_timeout, <%= node['private_chef']['opscode-erchef']['authz_timeout'] %>},
        {authz_fanout, <%= node['private_chef']['opscode-erchef']['authz_fanout'] %>},

        {reindex_batch_size, <%= @reindex_batch_size -%>},

        {enable_actions, <%= node['private_chef']['dark_launch']['actions'] %>},
        <% if @ldap_enabled -%>
        {ldap, [
            {host, "<%= @helper.normalize_host(node['private_chef']['ldap']['host']) || "localhost" %>"},
            {port, <%= node['private_chef']['ldap']['port'] || (@ssl_enabled ? 636 : 389) %> },
            {timeout, <%= node['private_chef']['ldap']['timeout'] || 60000 %> },
            {bind_dn, "<%= node['private_chef']['ldap']['bind_dn'] || "" %>" },
            %% TODO: user-provided pass, what do?
            {bind_password, "<%= @helper.escape_characters_in_string(node['private_chef']['ldap']['bind_password']) %>" },
            {base_dn, "<%= node['private_chef']['ldap']['base_dn'] || "" %>" },
            {group_dn, "<%= node['private_chef']['ldap']['group_dn'] || "" %>" },
            {login_attribute, "<%= node['private_chef']['ldap']['login_attribute'] || "samaccountname" %>" },
            {case_sensitive_login_attribute, <%= node['private_chef']['ldap']['case_sensitive_login_attribute'] || false %>},
            {encryption, <%= @ldap_encryption_type %>}
        ]},
        <% else -%>
        {ldap, []},
        <% end -%>
        %% these are used for reporting on license status on the
        %% license endpoint; it would have been nice to give these
        %% their own logical section, but erlang requires these to
        %% be part of a loaded application
        {node_license, <%= node['private_chef']['license']['nodes'] %>},
        {upgrade_url, <<"<%= node['private_chef']['license']['upgrade_url'] %>">>},
        {actions_host, "<%= @actions_vip %>"},
        {actions_port, <%= @actions_port %> },
        {actions_user, <<"<%= @actions_user %>">>},
        {actions_vhost, <<"<%= @actions_vhost %>">>},
        {actions_exchange, <<"<%= @actions_exchange %>">>},
        {actions_fqdn, <<"<%= node['private_chef']['lb']['api_fqdn'] %>">>},
        {max_request_size, <%= node['private_chef']['opscode-erchef']['max_request_size'] %>},
        {server_version, "<%= node['private_chef']['version'] %>"},
        {health_ping_timeout, <%= node['private_chef']['opscode-erchef']['health_ping_timeout'] %>},
        {health_ping_modules, [
            <% if node['private_chef']['data_collector']['root_url'] %>
            data_collector,
            <% end %>
            oc_chef_authz,
            chef_sql,
            chef_<%= node['private_chef']['opscode-erchef']['search_provider'] %>
        ]},
        {base_resource_url, <%= @helper.erl_atom_or_string(node['private_chef']['opscode-erchef']['base_resource_url']) %>},
        {bulk_fetch_batch_size, <%= @bulk_fetch_batch_size %>},
        {strict_search_result_acls, <%= @strict_search_result_acls %>},

        {rabbitmq, [
            {management,[
                {user, "<%= @node['private_chef']['rabbitmq']['management_user'] %>"},
                {port, <%= @node['private_chef']['rabbitmq']['management_port'] %>},
                % rabbitmq management http connection pool
                {rabbitmq_management_service, [
                    <% if node['private_chef']['fips_enabled'] -%>
                    %% See note about Bookshelf
                    {root_url, "http://<%= @actions_vip %>:<%= @node['private_chef']['rabbitmq']['management_port'] %>/api"},
                    <% else -%>
                    {root_url, "https://<%= @actions_vip %>:<%= @node['private_chef']['rabbitmq']['management_port'] %>/api"},
                    <% end %>
                    {timeout, <%= @node['private_chef']['rabbitmq']['rabbit_mgmt_timeout'] %>},
                    {init_count, <%= @node['private_chef']['rabbitmq']['rabbit_mgmt_http_init_count'] %>},
                    {max_count, <%= @node['private_chef']['rabbitmq']['rabbit_mgmt_http_max_count'] %>},
                    {cull_interval, {<%= @node['private_chef']['rabbitmq']['rabbit_mgmt_http_cull_interval'] %>, sec}},
                    {max_age, {<%= @node['private_chef']['rabbitmq']['rabbit_mgmt_http_max_age'] %>, sec}},
                    {max_connection_duration, {<%= @node['private_chef']['rabbitmq']['rabbit_mgmt_http_max_connection_duration'] %>, sec}},

                    {ibrowse_options, [
                        <%= @node['private_chef']['rabbitmq']['rabbit_mgmt_ibrowse_options'] %>
                    ]}
                ]}
            ]},
            {monitoring, [
                {queue_length_monitor_enabled, <%= @node['private_chef']['rabbitmq']['queue_length_monitor_enabled'] &&
                                                         @node['private_chef']['dark_launch']['actions'] %>},
                {queue_length_monitor_vhost, "<%= @node['private_chef']['rabbitmq']['queue_length_monitor_vhost'] %>"},
                {queue_length_monitor_queue, "<%= @node['private_chef']['rabbitmq']['queue_length_monitor_queue'] %>"},
                {queue_length_monitor_millis, <%= @node['private_chef']['rabbitmq']['queue_length_monitor_millis'] %>},
                {queue_length_monitor_timeout_millis, <%= @node['private_chef']['rabbitmq']['queue_length_monitor_timeout_millis'] %>},
                {drop_on_full_capacity, <%=  @node['private_chef']['rabbitmq']['drop_on_full_capacity']  %>},
                {prevent_erchef_startup_on_full_capacity, <%= @node['private_chef']['rabbitmq']['prevent_erchef_startup_on_full_capacity'] %>},
                {queue_at_capacity_affects_overall_status, <%= @node['private_chef']['rabbitmq']['queue_at_capacity_affects_overall_status'] %>}
            ]}
        ]}
    ]},

    {chef_authn, [
        {keyring, [{default, "/etc/opscode/webui_pub.pem"}]},
        <% unless node['private_chef']['opscode-erchef']['keygen_cache_workers'] == :auto -%>
        {keygen_cache_workers, <%= node['private_chef']['opscode-erchef']['keygen_cache_workers'] %>},
        <% end -%>
        {keygen_cache_size, <%= node['private_chef']['opscode-erchef']['keygen_cache_size'] %>},
        {keygen_start_size, <%= node['private_chef']['opscode-erchef']['keygen_start_size'] %>},
        {keygen_timeout, <%= node['private_chef']['opscode-erchef']['keygen_timeout'] %>},
        {keygen_size, <%= node['private_chef']['opscode-erchef']['keygen_key_size'] %>}
    ]},

    {oc_chef_authz, [
        {authz_root_url, "http://<%= @helper.vip_for_uri('oc_bifrost') %>:<%= node['private_chef']['oc_bifrost']['port'] %>" },
        {authz_service, [
            {root_url, "http://<%= @helper.vip_for_uri('oc_bifrost') %>:<%= node['private_chef']['oc_bifrost']['port'] %>" },
            {timeout, <%= node['private_chef']['opscode-erchef']['authz_timeout'] %>},
            {init_count, <%= node['private_chef']['oc_chef_authz']['http_init_count'] %>},
            {max_count, <%= node['private_chef']['oc_chef_authz']['http_max_count'] %>},
            {queue_max, <%= node['private_chef']['oc_chef_authz']['http_queue_max'] %>},
            {cull_interval, <%= node['private_chef']['oc_chef_authz']['http_cull_interval'] %>},
            {max_age, <%= node['private_chef']['oc_chef_authz']['http_max_age'] %>},
            {max_connection_duration, <%= node['private_chef']['oc_chef_authz']['http_max_connection_duration'] %>},
            {ibrowse_options, <%= node['private_chef']['oc_chef_authz']['ibrowse_options'] %>}
        ]},
        {cleanup_batch_size, <%= node['private_chef']['opscode-erchef']['cleanup_batch_size'] %>}
    ]},

    {chef_db, [
        {bulk_fetch_batch_size, <%= @bulk_fetch_batch_size %>}
    ]},

    {chef_index, [
        {ip_mode, [ <%=PrivateChef['use_ipv6'] ? "ipv6,ipv4" : "ipv4" %> ] },
        {rabbitmq_host, "<%= node['private_chef']['rabbitmq']['vip'] %>"},
        {rabbitmq_port, <%= node['private_chef']['rabbitmq']['node_port'] %> },
        {rabbitmq_user, <<"<%= node['private_chef']['rabbitmq']['user'] %>">>},
        {rabbitmq_vhost, <<"<%= node['private_chef']['rabbitmq']['vhost'] %>">>},
        {rabbitmq_exchange, <<"">>},
        {search_provider, <%= node['private_chef']['opscode-erchef']['search_provider'] %>},
        {search_queue_mode, <%= node['private_chef']['opscode-erchef']['search_queue_mode'] %>},
        {search_batch_max_size, <%= node['private_chef']['opscode-erchef']['search_batch_max_size'] %>},
        {search_batch_max_wait, <%= node['private_chef']['opscode-erchef']['search_batch_max_wait'] %>},
        {reindex_sleep_min_ms, <%= @reindex_sleep_min_ms -%>},
        {reindex_sleep_max_ms, <%= @reindex_sleep_max_ms -%>},
        {reindex_item_retries, <%= @reindex_item_retries -%>},
        {solr_service, [
            {root_url, "<%= @helper.solr_url() %>"},
            {timeout, <%= @solr_timeout %>},
            {init_count, <%= @solr_http_init_count %>},
            {max_count, <%= @solr_http_max_count %>},
            {cull_interval, <%= @solr_http_cull_interval %>},
            {max_age, <%= @solr_http_max_age %>},
            {max_connection_duration, <%= @solr_http_max_connection_duration %>},
            {ibrowse_options, <%= @solr_ibrowse_options %>}
        ]}
    ]},

    {chef_objects, [
        <% if node['private_chef']['fips_enabled'] -%>
        %% When we're using a fips openssl, we default to using http for bookshelf.
        %% The reason for this is because we do not have a TLS implementation for
        %% Erlang when we turn on fips.
        %%
        %% This is the reason that the only supported configuration for the fips
        %% package is standalone. We will allow http over localhost so that the
        %% chef server can talk to bookshelf.
        {s3_url, "http://<%= node['private_chef']['bookshelf']['listen'] %>:<%= node['private_chef']['bookshelf']['port'] %>"},
        <% else -%>
        {s3_url, "<%= @helper.bookshelf_s3_url %>"},
        <% end %>
        {s3_external_url, <%= @helper.erl_atom_or_string(node['private_chef']['bookshelf']['external_url']) %>},
        {s3_platform_bucket_name, "<%= node['private_chef']['opscode-erchef']['s3_bucket'] %>"},
        {s3_url_ttl, <%= node['private_chef']['opscode-erchef']['s3_url_ttl'] %>},
        {s3_url_expiry_window_size, <%= @helper.s3_url_caching(node['private_chef']['opscode-erchef']['s3_url_expiry_window_size']) %>},
        {s3_parallel_ops_timeout, <%= node['private_chef']['opscode-erchef']['s3_parallel_ops_timeout'] %>},
        {s3_parallel_ops_fanout, <%= node['private_chef']['opscode-erchef']['s3_parallel_ops_fanout'] %>},
        {depsolver_timeout, <%= @depsolver_timeout %>},
        {depsolver_pooler_timeout, <%= @depsolver_pooler_timeout %>}
    ]},

    <% if node['private_chef']['data_collector']['root_url'] %>
    {data_collector, [
        {root_url,                "<%= node['private_chef']['data_collector']['root_url'] %>"},
        {token,                   "<%= node['private_chef']['data_collector']['token'] %>"},
        {timeout,                 <%= node['private_chef']['data_collector']['timeout'] %>},
        {init_count,              <%= node['private_chef']['data_collector']['http_init_count'] %>},
        {max_count,               <%= node['private_chef']['data_collector']['http_max_count'] %>},
        {cull_interval,           <%= node['private_chef']['data_collector']['http_cull_interval'] %>},
        {max_age,                 <%= node['private_chef']['data_collector']['http_max_age'] %>},
        {max_connection_duration, <%= node['private_chef']['data_collector']['http_max_connection_duration'] %>},
        {ibrowse_options,         <%= node['private_chef']['data_collector']['ibrowse_options'] %>}
    ]},
    <% end %>

    {stats_hero, [
        {udp_socket_pool_size, <%= @udp_socket_pool_size || @db_pool_size %> },
        {protocol, <%= node['private_chef']['estatsd']['protocol'] %>},
        {estatsd_host, "<%= @helper.normalize_host(node['private_chef']['estatsd']['vip']) %>"},
        {estatsd_port, <%= node['private_chef']['estatsd']['port'] %>}
    ]},

    {opscoderl_httpc, [
        {pooler_timeout, <%= @authz_pooler_timeout %>}
    ]},

    {sqerl, [
        {db_driver_mod, sqerl_pgsql_client},
        {config_cb, {chef_secrets_sqerl, config, [{<<"opscode_erchef">>, <<"sql_password">>}]}},
        {ip_mode, [ <%=PrivateChef['use_ipv6'] ? "ipv6,ipv4" : "ipv4" %> ] },
        %% Database connection parameters
        {db_host, "<%= node['private_chef']['postgresql']['vip'] %>"},
        {db_port, <%= node['private_chef']['postgresql']['port'] %>},
        %% TODO(ssd): Should this move into chef_secrets as well
        {db_user, "<%= node['private_chef']['opscode-erchef']['sql_user'] %>"},
        {db_name, "opscode_chef" },
        {idle_check, 10000},
        {pooler_timeout, <%= @db_pooler_timeout %>},
        {db_timeout, <%= node['private_chef']['opscode-erchef']['sql_db_timeout'] %>},
        {prepared_statements, {oc_chef_sql, statements, [pgsql]}},
        {column_transforms, [
            {<<"created_at">>, {sqerl_transformers, convert_YMDHMS_tuple_to_datetime}},
            {<<"updated_at">>, {sqerl_transformers, convert_YMDHMS_tuple_to_datetime}}
        ]}
    ]},

    {webmachine, [
        {log_handlers, [
            {oc_wm_request_logger, [
                {file, "<%= File.join(@log_directory, 'requests.log') %>"},
                {file_size, <%= (@log_rotation['file_maxbytes'].to_f/1024/1024).round %>},  %% Size in MB
                {files, <%= @log_rotation['num_to_keep'] %>},
                {annotations, [req_id, org_name, msg, darklaunch, perf_stats, user, req_api_version]}
            ]}
        ]}
    ]},

    {ibrowse, [
        {default_max_sessions, <%= @ibrowse_max_sessions %>},
        {default_max_pipeline_size, <%= @ibrowse_max_pipeline_size %>}
    ]},

    {pooler, [
        {pools, [
            [
                {name, sqerl},
                {max_count, <%= @db_pool_max || @db_pool_size %>},
                {init_count, <%= @db_pool_init || @db_pool_size %>},
                {start_mfa, {sqerl_client, start_link, []}},
                {queue_max, <%= @db_pool_queue_max %>}
            ],
            [
                {name, chef_depsolver},
                {max_count, <%= @depsolver_worker_count %>},
                {init_count, <%= @depsolver_worker_count %>},
                {queue_max, <%= @depsolver_pool_queue_max %>},
                {start_mfa, {chef_depsolver_worker, start_link, []}}
            ]
        ]
    },

    {metrics_module, folsom_metrics}
]}

<% if !node['private_chef']['opscode-erchef']['ssl_session_caching']['enabled'] -%>
    ,
    {ssl, [
        {session_cb, noop_session_cache}
    ]}
    <% end -%>
    <% if node['private_chef']['folsom_graphite']['enabled'] -%>
    ,
    {folsom_graphite, [
        {graphite_host, "<%= @helper.normalize_host(node['private_chef']['folsom_graphite']['host']) %>"},
        {graphite_port, <%= node['private_chef']['folsom_graphite']['port'] %>},
        {graphite_prefix, "<%= node['private_chef']['folsom_graphite']['prefix'] %>"},
        {send_interval, <%= node['private_chef']['folsom_graphite']['send_interval'] %>},
        {retry_interval, <%= node['private_chef']['folsom_graphite']['retry_interval'] %>},
        {application, "erchef"}
    ]}
<% end -%>
].
