#!/bin/bash
#
# Cluster like it's 1999
#

LOGNAME=/var/log/opscode/keepalived/cluster.log
PROGNAME=$(basename $0)

# must be longer than unicorn 60 second timeout
export SVWAIT=30

requested_state_file=/var/opt/opscode/keepalived/requested_cluster_status
current_state_file=/var/opt/opscode/keepalived/current_cluster_status
lockfile=/var/opt/opscode/keepalived/cluster-transition.lock

function log_me
{
  echo $1
  echo "$(date -R): ${1}" >> $LOGNAME
}

function error_exit
{
  log_me "$1"
  echo "${PROGNAME}: ${1:-"Unknown Error"}" 1>&2
  exit 1
}

<%- keepalive_services = Dir.chdir(node['runit']['sv_dir']){Dir.glob('**/keepalive_me').map{|f| File.dirname(f)}}.sort -%>

function transition
{
  log_me "Transitioning to $1"
  case "$1" in
    master)
      if [ -x '/var/opt/opscode/keepalived/bin/ha_backend_storage' ]; then
        log_me "Attempting HA storage takeover"
        /var/opt/opscode/keepalived/bin/ha_backend_storage attach >> $LOGNAME 2>&1
        if [ $? -gt 0 ]; then
          error_exit "HA storage attach failed"
        else
          log_me "HA storage attach success"
        fi
      fi

<%- keepalive_services.each do |service| -%>
      log_me "Starting service <%= service %>"
      /opt/opscode/bin/private-chef-ctl start <%= service %> >> $LOGNAME 2>&1
      log_me "Start exit code: $?"
      /opt/opscode/init/<%= service %> status >> $LOGNAME 2>&1 || error_exit "Cannot start <%= service %>. Status exit code: $?"
<%- end -%>

      if [ -x '/var/opt/opscode/keepalived/bin/ha_backend_ip' ]; then
          log_me "Attempting HA BACKEND IP primary takeover"
          /var/opt/opscode/keepalived/bin/ha_backend_ip attach >> $LOGNAME 2>&1
          if [ $? -gt 0 ]; then
            error_exit "HA BACKEND IP attach failed"
          else
            log_me "HA BACKEND IP attach success"
          fi
      fi

      ;;
    # If we see a reason for a FAULT, we should try to relinquish control gracefully, like a BACKUP.
    # Worst case, the FAULT state will keep us out of the mix.
    backup|fault)
<%- keepalive_services.reverse.each do |service| -%>
      log_me "Stopping service <%= service %>"
      /opt/opscode/bin/private-chef-ctl graceful-kill <%= service %> || error_exit "Cannot kill <%= service %>"
<%- end -%>

      log_me "Done stopping services."
      log_me "lsof /var/opt/opscode/drbd/data:"
      lsof | grep /var/opt/opscode/drbd/data >> $LOGNAME 2>&1 || true
      if [ -x '/var/opt/opscode/keepalived/bin/ha_backend_storage' ]; then
        log_me "Attempting HA storage detach"
        /var/opt/opscode/keepalived/bin/ha_backend_storage detach >> $LOGNAME 2>&1
        if [ $? -gt 0 ]; then
          error_exit "HA storage detach failed"
        else
          log_me "HA storage detach success"
        fi
      fi

      if [ -x '/var/opt/opscode/keepalived/bin/ha_backend_ip' ]; then
          log_me "Attempting HA BACKEND IP to go standby"
          /var/opt/opscode/keepalived/bin/ha_backend_ip detach >> $LOGNAME 2>&1
          if [ $? -gt 0 ]; then
            error_exit "HA BACKEND IP detach failed"
          else
            log_me "HA BACKEND IP detach success"
          fi
      fi

      ;;
    *)
  esac
}

function lock
{
  if [ -e $1 ]; then
    read lockpid < $1
    if [ ! -z "$lockpid" -a -d /proc/$lockpid ]; then
      return 1
    fi
  fi
  trap "rm -f $1; exit" INT TERM EXIT
  echo $$ > $1
  return 0
}

function unlock
{
  rm $1
  trap - INT TERM EXIT
}

function transition_loop
{
   transition "$1"
   log_me "Transitioned to $1"
   transitioned_to=$1
   last_requested_state=`echo -n $(cat $requested_state_file)`
   while [ "$transitioned_to" != "$last_requested_state" ]; do
     transition $last_requested_state
     log_me "Transitioned to $last_requested_state"
     transitioned_to=$last_requested_state
     last_requested_state=`echo -n $(cat $requested_state_file)`
   done
   unlock $lockfile
   echo $transitioned_to > $current_state_file
}

echo $1 > $requested_state_file

if lock $lockfile; then
   transition_loop "$1"
else
   log_me "Requested transition to $1"
   error_exit "Requested transition to $1, but state transition already running."
fi

exit 0
