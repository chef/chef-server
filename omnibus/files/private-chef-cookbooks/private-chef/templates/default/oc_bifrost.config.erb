%% -*- mode: erlang -*-
%% -*- tab-width: 4;erlang-indent-level: 4;indent-tabs-mode: nil -*- %% ex: ts=4 sw=4 ft=erlang et
%%
%% oc_bifrost sys.config file
%%
%% Automatically generated by Chef
%%
[
 {kernel, [{start_pg2, true},
           {inet_dist_use_interface, {127,0,0,1}}
          ]},
 {sasl, [
         {sasl_error_logger, {file, "<%= File.join(@log_directory, 'sasl-error.log') %>"}},
         {errlog_type, error},
         {error_logger_mf_dir, "<%= File.join(@log_directory, 'sasl') %>"},      % Log directory
         {error_logger_mf_maxbytes, <%= @log_rotation['file_maxbytes'] %>},
         {error_logger_mf_maxfiles, <%= @log_rotation['num_to_keep'] %>}
        ]},
 {chef_secrets, [
                 {provider, chef_secrets_json_file},
                 {provider_config, [{secrets_file, "/etc/opscode/private-chef-secrets.json"}]}
                ]},
 {lager, [
          %% What handlers to install with what arguments
          %% The defaults for the logfiles are to rotate the files when
          %% they reach 10Mb or at midnight, whichever comes first, and keep
          %% the last 5 rotations. See the lager README for a description of
          %% the time rotation format:
          %% https://github.com/basho/lager/blob/master/README.md#internal-log-rotation
          %%
          %% If you wish to disable rotation, you can either set the size to 0
          %% and the rotation time to "", or instead specify a 2-tuple that only
          %% consists of {Logfile, Level}.
          {handlers, [
              {lager_console_backend, [info, {lager_default_formatter, [ "[", severity, "] ", message, "\n"]}]},
              {lager_file_backend, [
                                    {file, "<%= File.join(@log_directory, 'error.log') %>"},
                                    {level, error},
                                    {size, <%= @log_rotation['file_maxbytes'] %>},
                                    {date, "$D0"},
                                    {count, <%= @log_rotation['num_to_keep'] %>}
                                   ]},
              {lager_file_backend, [
                                    {file, "<%= File.join(@log_directory, 'console.log') %>"},
                                    {level, info},
                                    {size, <%= @log_rotation['file_maxbytes'] %>},
                                    {date, "$D0"},
                                    {count, <%= @log_rotation['num_to_keep'] %>},
                                    %% Removes the logging source, since currently
                                    %% there's only one place in all of Bifrost that
                                    %% we log from.  Also removes the PID from
                                    %% the default message format.
                                    {formatter_config, [date, " ", time, " [", severity, "] ", message, "\n"]}
                                   ]}
              ]},

          %% Whether to write a crash log, and where.
          %% Commented/omitted/undefined means no crash logger.
          {crash_log, "<%= File.join(@log_directory, 'crash.log') %>"},

          %% Maximum size in bytes of events in the crash log - defaults to 65536
          {crash_log_msg_size, 65536},

          %% Maximum size of the crash log in bytes, before its rotated, set
          %% to 0 to disable rotation - default is 0
          {crash_log_size, <%= @log_rotation['file_maxbytes'] %>},

          %% What time to rotate the crash log - default is no time
          %% rotation. See the lager README for a description of this format:
          %% https://github.com/basho/lager/blob/master/README.org
          {crash_log_date, "$D0"},

          %% Number of rotated crash logs to keep, 0 means keep only the
          %% current one - default is 0
          {crash_log_count, <%= @log_rotation['num_to_keep'] %>},

          %% Whether to redirect error_logger messages into lager - defaults to true
          {error_logger_redirect, true},

          %% Bump up the "high-water mark" (default 50), which is the
          %% number of messages per second allowed to come from
          %% error_logger.  This is the same as used by
          %% opscode-chef-mover, FWIW.
          {error_logger_hwm, <%= @log_rotation['max_messages_per_second'] %>}
        ]},
 {webmachine, [
          {log_handlers, [
               {oc_wm_request_logger, [
                       {file, "<%= File.join(@log_directory, 'requests.log') %>"},
                       {file_size, <%= (@log_rotation['file_maxbytes'].to_f/1024/1024).round %>},  %% Size in MB
                       {files, <%= @log_rotation['num_to_keep'] %>},
                         {annotations, [requestor_id, created_authz_id, perf_stats, msg]}
                       ]
                      }]}]
 },
 {sqerl, [
          {db_driver_mod, sqerl_pgsql_client},
          {config_cb, {chef_secrets_sqerl, config, [{<<"oc_bifrost">>, <<"sql_password">>}]}},
          {ip_mode, [ <%=PrivateChef['use_ipv6'] ? "ipv6,ipv4" : "ipv4" %> ] },
          {db_host, "<%= node['private_chef']['postgresql']['vip'] %>" },
          {db_port, <%= node['private_chef']['postgresql']['port'] %> },
          {db_user, "<%= node['private_chef']['oc_bifrost']['sql_user'] %>" },
          {db_name, "bifrost" },
          {idle_check, 10000},
          {pooler_timeout, <%= @db_pooler_timeout %>},
          {db_timeout, <%= node['private_chef']['oc_bifrost']['sql_db_timeout'] %>},
          {prepared_statements, {bifrost_db, statements, []} },
          {column_transforms, []}
         ]},
 {stats_hero, [
                {udp_socket_pool_size, <%= @udp_socket_pool_size || @db_pool_size %> },
                {protocol, <%= node['private_chef']['estatsd']['protocol'] %>},
                {estatsd_host, "<%= node['private_chef']['estatsd']['vip'] %>" },
                {estatsd_port, <%= node['private_chef']['estatsd']['port'] %> }
               ]},
 {pooler, [
           {pools, [[{name, sqerl},
                     {max_count, <%= @db_pool_max || @db_pool_size %> },
                     {init_count, <%= @db_pool_init || @db_pool_size %> },
                     {queue_max, <%= @db_pool_queue_max %>},
                     {start_mfa, {sqerl_client, start_link, []}}]]}
           %%,{metrics_module, folsom_metrics}
          ]},
 {bifrost, [
             {ip, "<%= @listen %>" },
             {port, <%= @port %> },
             {root_metric_key, "bifrost"},
             {enable_extended_perf_log, <%= @extended_perf_log %>}
            ]}
].
