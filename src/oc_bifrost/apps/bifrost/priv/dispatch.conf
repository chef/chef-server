%% -*- mode: erlang -*-

%% Basic server status resource
{["_status"], bifrost_wm_status_resource, []}.

%% Also support "_ping", which is what old Authz used.  This is just a
%% stop-gap measure until we can decide on a company-wide standard for
%% the status endpoints of our APIs, which should occur prior to the
%% release of OPC 11.  When a standard is decided on, we will remove
%% the extra resource definition here.
{["_ping"], bifrost_wm_status_resource, []}.

%% All ACL resources follow the pattern:
%%
%% /<type>/<id>/acl/<action>/<member_type>/<member_id>
%%
%% Group resources are slightly different and follow this pattern:
%%
%% /groups/<id>/<member_type>/<member_id>

%% POST for new entities
{["actors"], bifrost_wm_actors_resource, [{request_type, actor}]}.
{["groups"], bifrost_wm_unnamed_resources, [{request_type, group}]}.
{["objects"], bifrost_wm_unnamed_resources, [{request_type, object}]}.
{["containers"], bifrost_wm_unnamed_resources, [{request_type, container}]}.

%% POST for bulk requests
{["bulk"], bifrost_wm_bulk_resource, []}.
{["bulk", "_delete"], bifrost_wm_bulk_delete_resource, []}.

%% GET and DELETE of existing entities
{["actors", id], bifrost_wm_named_resources, [{request_type, actor}]}.
{["groups", id], bifrost_wm_named_resources, [{request_type, group}]}.
{["objects", id], bifrost_wm_named_resources, [{request_type, object}]}.
{["containers", id], bifrost_wm_named_resources, [{request_type, container}]}.

%% Group management (i.e., adding and removing actors/groups from groups)
{["groups", id, "actors", member_id],
 bifrost_wm_group_member_resource, [{request_type, group}, {member_type, actor}]}.
{["groups", id, "groups", member_id],
 bifrost_wm_group_member_resource, [{request_type, group}, {member_type, group}]}.

%% Recursive Group Membership Check
%% TODO Currently only supports actor since it uses db function groups_for_actor
%% and a similar one doesn't exist for groups_for_group.
{["groups", id, "transitive_member", "actors", member_id], bifrost_wm_transitive_member_resource,
 [{request_type, group}, {member_type, actor}]}.

%% GET ACLs
{["actors", id, "acl"], bifrost_wm_acl_resource, [{request_type, actor}]}.
{["groups", id, "acl"], bifrost_wm_acl_resource, [{request_type, group}]}.
{["objects", id, "acl"], bifrost_wm_acl_resource, [{request_type, object}]}.
{["containers", id, "acl"], bifrost_wm_acl_resource, [{request_type, container}]}.

%% Manipulation of ACLs for specific types of permissions
{["actors", id, "acl", action], bifrost_wm_acl_action_resource, [{request_type, actor}]}.
{["groups", id, "acl", action], bifrost_wm_acl_action_resource, [{request_type, group}]}.
{["objects", id, "acl", action], bifrost_wm_acl_action_resource, [{request_type, object}]}.
{["containers", id, "acl", action],
 bifrost_wm_acl_action_resource, [{request_type, container}]}.

%% Direct authorization checks
%%
%% Note that the old server didn't support anything but actors, for ease of
%% implemenation we've decided to deprecate groups here immediate
%%
%% TODO: do we want to simplify things in the code for this?  Not actually sure
%% it would be a win, though, because groups do have groups as members so the
%% code is being used elsewhere.
{["actors", id, "acl", action, "actors", member_id],
 bifrost_wm_acl_member_resource, [{request_type, actor}, {member_type, actor}]}.
{["groups", id, "acl", action, "actors", member_id],
 bifrost_wm_acl_member_resource, [{request_type, group}, {member_type, actor}]}.
{["objects", id, "acl", action, "actors", member_id],
 bifrost_wm_acl_member_resource, [{request_type, object}, {member_type, actor}]}.
{["containers", id, "acl", action, "actors", member_id],
 bifrost_wm_acl_member_resource, [{request_type, container}, {member_type, actor}]}.
