%% -*- mode: erlang; -*-

{require_otp_vsn, "18.*"}.

{erl_dep_retries, 10}.

{deps, [
        {lager,".*",
         {git,"https://github.com/basho/lager", {tag, "2.x"}}},
        {opscoderl_wm, ".*",
         {git, "https://github.com/chef/opscoderl_wm.git", {branch,"master"}}},
        {erlsom, ".*",
         {git, "https://github.com/chef/erlsom", {branch, "integer_long_string_probs"}}},
        {iso8601, ".*",
         {git, "https://github.com/chef/erlang_iso8601", {branch, "mp/erlang-18-compat"}}},
        {erlware_commons, ".*",
         {git, "https://github.com/erlware/erlware_commons", {branch, "master"}}},
        {mixer, ".*",
         {git, "https://github.com/chef/mixer", {branch, "master"}}},
        {mini_s3, ".*",
         {git, "https://github.com/chef/mini_s3", {branch, "mp/erl-18-compile-error-fix"}}},
        {meck, ".*",
         {git, "https://github.com/eproxus/meck.git", {branch, "master"}}},
        {sqerl, ".*",
         {git, "https://github.com/chef/sqerl", {branch, "master"}}},
        {envy, ".*",
         {git, "https://github.com/markan/envy", {branch, "master"}}},
        {sync, ".*",
         {git, "https://github.com/rustyio/sync", {branch, "master"}}},
        {eper, ".*",
         {git, "https://github.com/massemanet/eper", {branch, "master"}}}
       ]}.


{erl_opts, [
    debug_info,
    {parse_transform, lager_transform},
    warnings_as_errors,
    {i, "include"}
]}.

{eunit_compile_opts, [{d,'EUNIT_TEST'}]}.

{plugins, [{pc, "0.3.0"}]}.

{xref_checks,
 [undefined_function_calls,
  undefined_functions,
  locals_not_used,
  deprecated_function_calls,
  deprecated_functions]}.

{xref_queries,
 [ %% Use this instead of `exports_not_used`; we'll filter out references to
   %% generic callbacks, generated functions, etc.
   %%
   %% Ideally, we want no functions to come back from this query; that means
   %% we're using everything! Adjust regexes / remove code until this is the
   %% case.
   {"UU" %% Unused functions (xref builtin)
   " - "
   "\"bksw_app\":\"(start|stop)\"/\".*\"" %% application callbacks
   " - "
   "\"bksw_app\":\"remsh_welcome\"/\".*\"" %% application callbacks
   " - "
   "\".*_sup\":\"init\"/\"1\"" %% supervisor callbacks
   " - "
   "\".*\":\"start_link\"/\".*\"" %% any start_link fun
   " - "
   "\"bksw_cleanup_task\":\"(init|handle_call|handle_cast|handle_info|terminate|code_change)\"/\".*\"" %% gen_server generic callback funs
   " - "
   "\"bksw_cleanup_task\":\"(force_deleted_cleanup|force_upload_cleanup)\"/\".*\"" %% intended to be used from a remsh
   " - "
   "\".*_wm_.*\":\"(init|ping|is_authorized|finish_request|service_available|to_xml|resource_exists|allowed_methods|content_types_accepted|content_types_provided|generate_etag|last_modified|delete_resource)\"/\".*\"" %% (some) Webmachine callbacks
   " - "
   "\"(bksw_wm_sql_bucket|bksw_wm_bucket)\":\"(create_resource)\"/\".*\"" %% content_types_accepted-defined callbacks,
   " - "
   "\"(bksw_sql|bksw_sql)\":\"(ping|statements)\"/\".*\""
   " - "
   "\"(bksw_xml)\":\"(write_erl|write_hrl)\"/\".*\"" %% these look like they might be mean to run manually?
   " - "
   "\"(bksw_conf)\":\"(reset_dispatch)\"/\".*\"" %% used in tests
   " - "
   "\"(bksw_wm_sql_object|bksw_wm_object)\":\"(validate_content_checksum|upload|download)\"/\".*\"" %% content_types_accepted-defined callbacks,
  ,[]} %% Expected results (i.e., nothing)
 ]}.

{cover_enabled, true}.

{pre_hooks, [
             {clean, "make version_clean"},
             {compile, "make VERSION"}
]}.

{profiles, [
    {dev, [
        {relx, [{dev_mode, true},
                {include_src, true}
               ]}
       ]},
    {fips, [
        {deps, [
            {crypto, {git,"git://github.com/jaym/erlang-crypto2", {branch, "master"}}}
        ]}
       ]},
    {test, [
        {deps, [
            {cth_readable,
                {git, "https://github.com/ferd/cth_readable.git", {branch, "master"}}}
        ]}
    ]}
]}.

{ct_opts, [
    {dir, "test"},
    {ct_hooks, [cth_readable_failonly, cth_readable_shell]}
]}.

{relx, [
  {release,{bookshelf,{cmd,"cat VERSION"}},
    [bookshelf,
     {sync, load},
     {eunit, load},
     {mixer, load},
     syntax_tools,
     compiler,
     eper,
     {pooler, load},
     {sqerl, load}
  ]},

  {include_src, false},
  {extended_start_script,true},
  {overlay,[{template,"config/vm.args","vm.args"},
            {template,"config/app.config","sys.config"},
            {copy,"schema","."}
           ]}
]}.
