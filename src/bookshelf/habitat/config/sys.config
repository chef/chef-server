%% -*- mode: erlang -*-
%% -*- tab-width: 4;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ts=4 sw=4 ft=erlang et

[
 {kernel, [{inet_dist_use_interface, {127,0,0,1}}]},
 %% SASL config
 {sasl, [
         {errlog_type, error}
        ]},
   {lager, [
          %% What handlers to install with what arguments
          %% The defaults for the logfiles are to rotate the files when
          %% they reach 10Mb or at midnight, whichever comes first, and keep
          %% the last 5 rotations. See the lager README for a description of
          %% the time rotation format:
          %% https://github.com/basho/lager/blob/master/README.org
          %%
          %% If you wish to disable rotation, you can either set the size to 0
          %% and the rotation time to "", or instead specify a 2-tuple that only
          %% consists of {Logfile, Level}.
          {handlers, [
                      {lager_console_backend, {{cfg.lager.lager_console_backend}}},
                      {lager_file_backend, [{file, "{{pkg.svc_var_path}}/log/error.log"},
                                            {level, error}, {size, 10485760},
                                            {date, "$D0"}, {count, 5}]},
                      {lager_file_backend, [{file, "{{pkg.svc_var_path}}/log/console.log"},
                                            {level, info}, {size, 10485760},
                                            {date, "$D0"}, {count, 5}]}
                     ]},

          %% Whether to write a crash log, and where.
          %% Commented/omitted/undefined means no crash logger.
          {crash_log, "{{pkg.svc_var_path}}/log/crash.log"},

          %% Maximum size in bytes of events in the crash log - defaults to 65536
          {crash_log_msg_size, 65536},

          %% Maximum size of the crash log in bytes, before its rotated, set
          %% to 0 to disable rotation - default is 0
          {crash_log_size, 10485760},

          %% What time to rotate the crash log - default is no time
          %% rotation. See the lager README for a description of this format:
          %% https://github.com/basho/lager/blob/master/README.org
          {crash_log_date, "$D0"},

          %% Number of rotated crash logs to keep, 0 means keep only the
          %% current one - default is 0
          {crash_log_count, 5},

          %% Whether to redirect error_logger messages into lager - defaults to true
          {error_logger_redirect, true}
         ]},
 {bookshelf, [{ip, "{{cfg.bookshelf.listen_ip}}"},
              {port, {{cfg.bookshelf.listen_port}}},
              {keys, {"{{cfg.bookshelf.access_key_id}}",
                      "{{cfg.bookshelf.secret_access_key}}"}},
              {storage_type, {{cfg.bookshelf.storage_type}} },
              {disk_store, "{{pkg.svc_data_path}}"},
{{#if cfg.bookshelf.storage_type_sql ~}}
              {sql_retry_count, cfg.bookshelf.sql_retry_count}} },
              {sql_retry_delay, cfg.bookshelf.sql_retry_delay}} },
              {abandoned_upload_cleanup_interval, {{cfg.bookshelf.abandoned_upload_cleanup_interval}} },
              {deleted_data_cleanup_interval, cfg.bookshelf.deleted_data_cleanup_interval}} },
{{/if ~}}
              {stream_download, {{cfg.bookshelf.stream_download}} },
              {log_dir, "{{pkg.svc_var_path}}/log/"}
             ]},
{{#if cfg.bookshelf.storage_type_sql ~}}
 {sqerl, [
           {db_driver_mod, sqerl_pgsql_client},
           {ip_mode, [ "ipv4" ] },

          %% Database connection parameters
           {{#if bind.database ~}}
           {{#each bind.database.members ~}}
           {{#if alive}}
           {db_host, "{{ip}}" },
           {{/if}}
           {{/each}}
           {{else ~}}
           {db_host, "{{cfg.sqerl.db_host}}" },
           {{/if ~}}
           {db_port, {{cfg.sqerl.db_port}} },
           {db_user, "{{cfg.sqerl.db_user}}" },
           {db_pass, "{{cfg.sqerl.db_pass}}" },
           {db_name, "{{cfg.sqerl.db_name}}" },
           {idle_check, 10000},
           {pooler_timeout, cfg.sqerl.db_pooler_timeout}} },
           {db_timeout, {{cfg.sqerl.sql_db_timeout}} },
           {prepared_statements, {bksw_sql, statements, [pgsql]}},
           {column_transforms,
                              [{<<"created_at">>,
                                {sqerl_transformers, convert_YMDHMS_tuple_to_datetime}},
                               {<<"updated_at">>,
                                {sqerl_transformers, convert_YMDHMS_tuple_to_datetime}}]
           }
          ]},
{pooler, [
            {pools, [[{name, sqerl},
                      {max_count,  {{cfg.pooler.max_count}} },
                      {init_count, {{cfg.pooler.init_count}} },
                      {queue_max, {{cfg.pooler.queue_max}} },
                      {start_mfa, {sqerl_client, start_link, []}}]]}
           ]},
{{/if ~}}
 {webmachine, [{log_handlers, []}]}
].
