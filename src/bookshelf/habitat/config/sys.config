%% -*- mode: erlang -*-
%% -*- tab-width: 4;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ts=4 sw=4 ft=erlang et

[
 {kernel, [{inet_dist_use_interface, {127,0,0,1}}]},
 %% SASL config
 {sasl, [
         {sasl_error_logger, {file, "{{pkg.svc_var_path}}/logs/sasl-error.log"}},
         {errlog_type, error},
         {error_logger_mf_dir, "{{pkg.svc_var_path}}/logs"},      % Log directory
         {error_logger_mf_maxbytes, 104857600},
         {error_logger_mf_maxfiles, 10}
        ]},
 {lager, [
          %% What handlers to install with what arguments
          %% The defaults for the logfiles are to rotate the files when
          %% they reach 10Mb or at midnight, whichever comes first, and keep
          %% the last 5 rotations. See the lager README for a description of
          %% the time rotation format:
          %% https://github.com/basho/lager/blob/master/README.md#internal-log-rotation
          %%
          %% If you wish to disable rotation, you can either set the size to 0
          %% and the rotation time to "", or instead specify a 2-tuple that only
          %% consists of {Logfile, Level}.
          {handlers, [
              {lager_console_backend, [{{cfg.lager.lager_console_backend}}, {lager_default_formatter, [ "[", severity, "] ", message, "\n"]}]},
              {lager_file_backend, [
                                    {file, "{{pkg.svc_var_path}}/logs/error.log"},
                                    {level, error},
                                    {size, 104857600},
                                    {date, "$D0"},
                                    {count, 10}
                                   ]},
              {lager_file_backend, [
                                    {file, "{{pkg.svc_var_path}}/logs/console.log"},
                                    {level, info},
                                    {size, 104857600},
                                    {date, "$D0"},
                                    {count, 10},
                                    %% Removes the logging source, since currently
                                    %% there's only one place in all of Bifrost that
                                    %% we log from.  Also removes the PID from
                                    %% the default message format.
                                    {formatter_config, [date, " ", time, " [", severity, "] ", message, "\n"]}
                                   ]}
              ]},

          %% Whether to write a crash log, and where.
          %% Commented/omitted/undefined means no crash logger.
          {crash_log, "{{pkg.svc_var_path}}/logs/crash.log"},

          %% Maximum size in bytes of events in the crash log - defaults to 65536
          {crash_log_msg_size, 65536},

          %% Maximum size of the crash log in bytes, before its rotated, set
          %% to 0 to disable rotation - default is 0
          {crash_log_size, 104857600},

          %% What time to rotate the crash log - default is no time
          %% rotation. See the lager README for a description of this format:
          %% https://github.com/basho/lager/blob/master/README.org
          {crash_log_date, "$D0"},

          %% Number of rotated crash logs to keep, 0 means keep only the
          %% current one - default is 0
          {crash_log_count, 10},

          %% Whether to redirect error_logger messages into lager - defaults to true
          {error_logger_redirect, true},

          %% Bump up the "high-water mark" (default 50), which is the
          %% number of messages per second allowed to come from
          %% error_logger.  This is the same as used by
          %% opscode-chef-mover, FWIW.
          {error_logger_hwm, 1000}
        ]},
  {chef_secrets, [
                 {provider, chef_secrets_env}
                ]},
 {bookshelf, [{ip, "0.0.0.0"},
              {port, {{cfg.port}} },
              {storage_type, sql},
              {disk_store, "{{pkg.svc_data_path}}"}, %% prob obsolete, revisit
              {sql_retry_count, {{cfg.bookshelf.sql_retry_count}} },
              {sql_retry_delay, {{cfg.bookshelf.sql_retry_delay}} },
              {abandoned_upload_cleanup_interval, {{cfg.bookshelf.abandoned_upload_cleanup_interval}} },
              {deleted_data_cleanup_interval, {{cfg.bookshelf.deleted_data_cleanup_interval}} },
              {stream_download, {{cfg.bookshelf.stream_download}} },
              {log_dir, "{{pkg.svc_var_path}}/log"}
             ]},
 {sqerl, [
           {db_driver_mod, sqerl_pgsql_client},
           {ip_mode, [ ipv4 ] },
{{#if bind.database ~}}
  {{#eachAlive bind.database.members as |member| ~}}
    {{~#if @last}}
           {db_host, "{{member.sys.ip}}"},
           {db_port, {{member.cfg.port}} },
           {db_user, "{{member.cfg.superuser_name}}"},
           {db_pass, "{{member.cfg.superuser_password}}" },
    {{/if ~}}
  {{/eachAlive ~}}
{{~else}}
           {db_host, "{{cfg.sqerl.db_host}}"},
           {db_port, {{cfg.sqerl.db_port}} },
           {db_user, "{{cfg.sqerl.db_user}}"},
           {db_pass, "{{cfg.sqerl.db_pass}}"},
{{~/if}}
           {db_name, "{{cfg.sqerl.db_name}}" },
           {idle_check, 10000},
           {pooler_timeout, {{cfg.sqerl.db_pooler_timeout}} },
           {db_timeout, {{cfg.sqerl.sql_db_timeout}} },
           {prepared_statements, {bksw_sql, statements, [pgsql]}},
           {column_transforms,
                              [{<<"created_at">>,
                                {sqerl_transformers, convert_YMDHMS_tuple_to_datetime}},
                               {<<"updated_at">>,
                                {sqerl_transformers, convert_YMDHMS_tuple_to_datetime}}]
           }
          ]},
 {pooler, [
           {pools, [
{{~#with cfg/pooler/sqerl }}
                    [{name, sqerl},
                     {max_count, {{max_count}} },
                     {init_count, {{init_count}} },
                     {queue_max, {{queue_max}} },
                     {start_mfa, {sqerl_client, start_link, []}}]
{{~/with ~}}
                   ]}
           %%,{metrics_module, folsom_metrics}
          ]},
 {webmachine, [
          {log_handlers, [
%%% Log handling is disabled, because it is redundant (nginx also logs requests)
%%% If debug logging is needed, this can be uncommented to start logging somewhat verbose logs
%%%              {oc_wm_request_logger, [
%%%                       {file, "/var/logs/opscode/bookshelf/requests.log"},
%%%                       {file_size, 100},  %% Size in MB
%%%                       {files, 5},
%%%                       {annotations, [user, req_id]}
%%%                       ]
%%%               }
                         ]
          }]}
].
