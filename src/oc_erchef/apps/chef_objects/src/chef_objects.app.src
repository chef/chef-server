%% Copyright 2012 Opscode, Inc. All Rights Reserved.
%%
%% This file is provided to you under the Apache License,
%% Version 2.0 (the "License"); you may not use this file
%% except in compliance with the License.  You may obtain
%% a copy of the License at
%%
%%   http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing,
%% software distributed under the License is distributed on an
%% "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
%% KIND, either express or implied.  See the License for the
%% specific language governing permissions and limitations
%% under the License.
%%

{application, chef_objects,
 [
  {description, "Chef object types and support modules"},
  {vsn, {cmd,"cat ../../VERSION | awk '{print $0}'"}},
  {registered, []},
  {applications, [
                  kernel,
                  stdlib,
                  crypto,
                  bcrypt,
                  ibrowse,
                  folsom,
                  chef_secrets,
                  pooler
                 ]},
  {env, [
         %% S3 Access credentials for Bookshelf operations
         {s3_access_key_id, undefined},
         {s3_secret_key_id, undefined},

         %% s3_url is the URL that Chef Server uses to make S3
         %% requests itself, which is different from the URL it tells
         %% chef-client to use (that's s3_external_url)
         {s3_url, undefined},

         %% s3_external_url is the URL that Chef Server sends to
         %% chef-client for it to fetch cookbooks. It's for when
         %% s3_url might be something that nodes running chef-client
         %% aren't able to access
         {s3_external_url, undefined},

         %% The name of the Amazon S3 bucket. (This is configurable
         %% and may be pointed at external storage locations, such as
         %% Amazon EC2.
         %%
         %% Four settings require configuration when pointing at an
         %% external cookbook storage location:
         %%
         %% bookshelf['vip'], for the endpoint used by the
         %% chef-client;
         %%
         %% bookshelf['external_url'], for the endpoint used by the
         %% Chef server;
         %%
         %% bookshelf['access_key_id'], for user access key;
         %%
         %% bookshelf['secret_access_key'], for secret key;
         %%
         %% opscode_erchef['s3_bucket'], for the bucket name.
         %%
         %% Reconfigure the Chef server after changing these settings
         {s3_platform_bucket_name, "bookshelf"},


         %% Timeout value in milliseconds for S3 operations
         {s3_parallel_ops_timeout, 5000},

         %% The number of processes available to run parallel S3
         %% operations
         {s3_parallel_ops_fanout, 20},

         %% The amount of time (in milliseconds) to wait for cookbook
         %% dependency problems to be solved.
         {depsolver_timeout, 5000},

         %% The amount of time a signed s3_URL generated by the Chef
         %% server will be valid. After this timeout, requests using
         %% the link will fail with HTTP 403. Note: this may not be
         %% the exact lifetime of the s3 URL. See
         %% s3_url_expiry_window_size below for more information
         {s3_url_ttl, 28800},

         %% When signed S3 URLs are generated, there's an Expiry as
         %% part of the query string. Since it's always a function of
         %% X seconds from now, the Expiry is always different, which
         %% prevents a load balancer from caching these cookbooks
         %% successfully. Increasing this setting will allow a load
         %% balancer to serve more cached cookbooks and fewer wasted
         %% cycles on caching data that will ultimately never be
         %% served
         %%
         %% You can set an interval length that will guarantee that
         %% the URLs generated during that interval will always be the
         %% same. For example, the setting {15, minutes} will add some
         %% amount of seconds between 0 and 900 to the Expiry to make sure
         %% it lands on a 15 minute interval.
         %%
         %% Sometimes, you just want the interval length to be a
         %% function of the Expiry you've chosen. In that case you can
         %% use {15, percent} which will set the interval size to
         %% (Expiry * 0.15).
         %%
         %% Of course, you could also just set it to 'off' if you want
         %% every URL to be unique
         {s3_url_expiry_window_size, {15, percent}}
        ]}
 ]}.
