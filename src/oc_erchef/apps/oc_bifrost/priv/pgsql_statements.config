%% -*- mode:erlang, erlang-indent-level: 4;indent-tabs-mode: nil -*-
{ping, <<"SELECT 'pong' AS ping LIMIT 1">>}.

%% Creation function for authz entities
%% third argument (the requestor) can be NULL
{create_entity,
 <<"SELECT create_and_add_permissions AS success
    FROM create_and_add_permissions($1, $2, $3)">>}.

%% Deletions for each authz_type
{delete_actor_by_authz_id,
 <<"DELETE FROM auth_actor
    WHERE authz_id = $1">>}.

{delete_container_by_authz_id,
 <<"DELETE FROM auth_container
    WHERE authz_id = $1">>}.

{delete_group_by_authz_id,
 <<"DELETE FROM auth_group
    WHERE authz_id = $1">>}.

{delete_object_by_authz_id,
 <<"DELETE FROM auth_object
    WHERE authz_id = $1">>}.

%% Queries for existance for each authz_type
{actor_exists,
 <<"SELECT EXISTS(
      SELECT authz_id
      FROM auth_actor
      WHERE authz_id=$1
    ) AS exists">>}.

{group_exists,
 <<"SELECT EXISTS(
      SELECT authz_id
      FROM auth_group
      WHERE authz_id=$1
    ) AS exists">>}.

{container_exists,
 <<"SELECT EXISTS(
      SELECT authz_id
      FROM auth_container
      WHERE authz_id=$1
    ) AS exists">>}.

{object_exists,
 <<"SELECT EXISTS(
      SELECT authz_id
      FROM auth_object
      WHERE authz_id=$1
    ) AS exists">>}.

{is_actor_recursive_member_of_group,
<<"SELECT EXISTS(
     SELECT auth_group.id FROM auth_actor, auth_group
     WHERE auth_actor.authz_id=$1
     AND auth_group.authz_id=$2 AND auth_group.id IN (
       SELECT groups_for_actor(auth_actor.id))
     ) AS exists">>}.

%% Updating ACLs
{update_acl,
 <<"SELECT update_acl AS success
    FROM update_acl($1, $2, $3, $4, $5)">>}.

%% Clearing ACLs
{clear_acl,
 <<"SELECT clear_acl AS success
    FROM clear_acl($1, $2, $3)">>}.

%% Retrieving lists actors and groups from ACLs (by permission)
{actors_in_actor_acl,
 <<"SELECT authz_id
    FROM auth_actor
    JOIN actor_acl_actor ON authorizee = auth_actor.id
    WHERE target = actor_id($1) AND permission = $2">>}.

{groups_in_actor_acl,
 <<"SELECT authz_id
    FROM auth_group
    JOIN actor_acl_group ON authorizee = auth_group.id
    WHERE target = actor_id($1) AND permission = $2">>}.

{actors_in_group_acl,
 <<"SELECT authz_id
    FROM auth_actor
    JOIN group_acl_actor ON authorizee = auth_actor.id
    WHERE target = group_id($1) AND permission = $2">>}.

{groups_in_group_acl,
 <<"SELECT authz_id
    FROM auth_group
    JOIN group_acl_group ON authorizee = auth_group.id
    WHERE target = group_id($1) AND permission = $2">>}.

{actors_in_object_acl,
 <<"SELECT authz_id
    FROM auth_actor
    JOIN object_acl_actor ON authorizee = auth_actor.id
    WHERE target = object_id($1) AND permission = $2">>}.

{groups_in_object_acl,
 <<"SELECT authz_id
    FROM auth_group
    JOIN object_acl_group ON authorizee = auth_group.id
    WHERE target = object_id($1) AND permission = $2">>}.

{actors_in_container_acl,
 <<"SELECT authz_id
    FROM auth_actor
    JOIN container_acl_actor ON authorizee = auth_actor.id
    WHERE target = container_id($1) AND permission = $2">>}.

{groups_in_container_acl,
 <<"SELECT authz_id
    FROM auth_group
    JOIN container_acl_group ON authorizee = auth_group.id
    WHERE target = container_id($1) AND permission = $2">>}.

%% Checking to see if actors have access on supplied list of authz entities
{actor_has_bulk_permission,
 <<"SELECT actor_has_bulk_permission_on AS authz_id
    FROM actor_has_bulk_permission_on($1, $2, $3, $4)">>}.

%% Checking to see if actors have specific access on an authz entity; function
%% will also accept 'any' for testing against any permission
{actor_has_permission_on,
 <<"SELECT actor_has_permission_on AS permission
    FROM actor_has_permission_on($1, $2, $3, $4)">>}.

%% Getting the actor and group members of groups
{group_actor_members,
 <<"SELECT authz_id
    FROM auth_actor
    JOIN group_actor_relations ON child = auth_actor.id
    WHERE parent = group_id($1)">>}.

{group_group_members,
 <<"SELECT authz_id
    FROM auth_group
    JOIN group_group_relations ON child = auth_group.id
    WHERE parent = group_id($1)">>}.

%% Adding actors and groups to groups
{insert_actor_into_group,
 <<"INSERT INTO group_actor_relations(child, parent)
    values (actor_id($1), group_id($2))">>}.

{insert_group_into_group,
 <<"INSERT INTO group_group_relations(child, parent)
    values (group_id($1), group_id($2))">>}.

%% Removing actors and groups from groups
{delete_actor_from_group,
 <<"DELETE FROM group_actor_relations
    WHERE child = actor_id($1) AND parent = group_id($2)">>}.

{delete_group_from_group,
 <<"DELETE FROM group_group_relations
    WHERE child = group_id($1) AND parent = group_id($2)">>}.
