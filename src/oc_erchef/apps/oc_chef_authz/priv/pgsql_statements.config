%% -*- mode:erlang, erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ts=4 sw=4 et ft=erlang
%%
%% Copyright 2015 Chef Software, Inc. All Rights Reserved.
%%
%% This file is provided to you under the Apache License,
%% Version 2.0 (the "License"); you may not use this file
%% except in compliance with the License.  You may obtain
%% a copy of the License at
%%
%%   http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing,
%% software distributed under the License is distributed on an
%% "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
%% KIND, either express or implied.  See the License for the
%% specific language governing permissions and limitations
%% under the License.
%%
{user_in_org,
 <<"SELECT count(*)"
   "  FROM users u, org_user_associations assoc, orgs o"
   " WHERE u.id = assoc.user_id AND o.id = assoc.org_id"
   "   AND u.username = $1 AND o.name = $2;">>}.

% Org-user invites
{insert_org_user_invite,
 <<"INSERT INTO org_user_invites (id, org_id, user_id, last_updated_by, created_at, updated_at)"
   " VALUES ($1, $2, $3, $4, $5, $6)">>}.
{delete_org_user_invite_by_id, <<"DELETE FROM org_user_invites WHERE id= $1">>}.
{find_org_user_invite_by_id, <<"SELECT i.id id, o.id as org_id, o.name as org_name, u.id as user_id, u.username as user_name, i.last_updated_by, i.created_at, i.updated_at "
                               "  FROM org_user_invites i, orgs o, users u "
                               " WHERE i.id = $1 "
                               "   AND user_id = u.id "
                               "   AND org_id = o.id ">>}.
{list_org_user_invites , <<"SELECT i.id as id, u.username as user_name "
                           "  FROM org_user_invites i, users u "
                           " WHERE i.org_id = $1 "
                           "   AND i.user_id = u.id "
                           " ORDER BY user_name">>}.
{list_user_org_invites, <<"SELECT i.id as id, o.name as org_name "
                           "  FROM org_user_invites i, orgs o, users u "
                           " WHERE i.user_id = $1 "
                           "   AND i.org_id = o.id "
                           "   AND u.id = i.user_id "
                           " ORDER BY org_name">>}.

% Org-user associations
 {insert_org_user_association,
  <<"INSERT INTO org_user_associations (org_id, user_id, last_updated_by, created_at, updated_at)"
    " VALUES ($1, $2, $3, $4, $5)">>}.
 {delete_org_user_association_by_ids,
  <<"DELETE FROM org_user_associations WHERE org_id= $1 AND user_id= $2">>}.
 {find_org_user_association_by_ids,
  <<"SELECT org_id, user_id, username as user_name, a.last_updated_by, a.created_at, a.updated_at"
    "  FROM org_user_associations a, users u"
    " WHERE org_id= $1 AND user_id= $2 AND a.user_id = u.id">>}.

 {list_user_org_associations, <<"SELECT o.name as name, o.full_name as full_name, o.id as guid"
                                "  FROM org_user_associations a, orgs o"
                                " WHERE a.org_id = o.id"
                                "   AND user_id = $1">>}.

 % Note here that because an org association isn't an 'object' per se, the form is different -
 % we just need a list of names.
 {list_org_user_associations, <<"   SELECT username as user_name"
                                "     FROM org_user_associations a, users u"
                                "    WHERE org_id = $1 AND a.user_id = u.id"
                                " ORDER BY user_name">>}.

 {insert_organization,
  <<"INSERT INTO orgs (id, authz_id, name, full_name,"
    " assigned_at, last_updated_by, created_at, updated_at) VALUES"
    " ($1, $2, $3, $4, $5, $6, $7, $8)">>}.
 {update_organization_by_id,
  <<"UPDATE orgs SET last_updated_by= $1, updated_at= $2, name= $3, full_name= $4"
    "WHERE id= $5">>}.
 {delete_organization_by_id, <<"DELETE FROM orgs WHERE id= $1">>}.
 {find_organization_by_id,
  <<"SELECT id, authz_id, name, full_name, assigned_at, last_updated_by, created_at, updated_at"
    " FROM orgs "
    " WHERE id= $1 LIMIT 1">>}.
 {find_organization_by_name,
  <<"SELECT id, authz_id, name, full_name, assigned_at, last_updated_by, created_at, updated_at"
    " FROM orgs "
    " WHERE name= $1 LIMIT 1">>}.
 {list_organizations, <<"SELECT name FROM orgs">>}.
 {find_container_by_orgid_name,
  <<"SELECT id, authz_id, org_id, name, last_updated_by, created_at, updated_at"
    " FROM containers "
    " WHERE (org_id = $1 AND name = $2) LIMIT 1">>}.
 {insert_container,
  <<"INSERT INTO containers (id, authz_id, org_id, name,"
    " last_updated_by, created_at, updated_at) VALUES"
    " ($1, $2, $3, $4, $5, $6, $7)">>}.
 {update_container_by_id,
  <<"UPDATE containers SET last_updated_by= $1, updated_at= $2, name= $3"
    "WHERE id= $4">>}.
 {delete_container_by_id, <<"DELETE FROM containers WHERE id= $1">>}.
 {list_containers_for_org, <<"SELECT name FROM containers WHERE org_id= $1">>}.
 {list_groups_for_org, <<"SELECT name FROM groups WHERE org_id= $1">>}.
 {find_group_by_orgid_name,
  <<"SELECT id, authz_id, org_id, name, last_updated_by, created_at, updated_at"
    " FROM groups"
    " WHERE (org_id = $1 AND name = $2) LIMIT 1">>}.
 {insert_group,
  <<"INSERT INTO groups (id, authz_id, org_id, name,"
    " last_updated_by, created_at, updated_at) VALUES"
    " ($1, $2, $3, $4, $5, $6, $7)">>}.
 {update_group_by_id,
  <<"UPDATE groups SET last_updated_by= $1, updated_at= $2, name= $3"
    "WHERE id= $4">>}.
 {delete_group_by_id, <<"DELETE FROM groups WHERE id= $1">>}.

 {list_policies_for_org, <<"SELECT name FROM policies WHERE org_id= $1">>}.
 {find_policy_by_orgid_name,
  <<"SELECT id, authz_id, org_id, name, last_updated_by"
    " FROM policies"
    " WHERE (name = $1 AND org_id = $2)">>}.
 {insert_policy,
  <<"INSERT INTO policies (id, authz_id, org_id, name,"
    " last_updated_by) VALUES"
    " ($1, $2, $3, $4, $5)">>}.
 {update_policy_by_id,
  <<"UPDATE policies SET last_updated_by= $1, name = $2, policy_group=$3"
    "WHERE id = $5">>}.
 {delete_policy_by_name_org_id, <<"DELETE FROM policies WHERE name= $1 AND org_id= $2">>}.
 {delete_policy_by_id, <<"DELETE FROM policies WHERE id= $1">>}.

 {insert_policy_group,
  <<"INSERT INTO policy_groups (id, authz_id, org_id, name,"
    " last_updated_by) VALUES"
    " ($1, $2, $3, $4, $5)">>}.
 {list_policy_groups_for_org, <<"SELECT name FROM policy_groups WHERE org_id= $1">>}.
 {find_policy_group_by_orgid_name,
  <<"SELECT id, authz_id, org_id, name, last_updated_by"
    " FROM policy_groups"
    " WHERE (name = $1 AND org_id = $2)">>}.
 {delete_policy_group_by_id, <<"DELETE FROM policy_groups WHERE id= $1">>}.

 {insert_policy_revision,
  <<"INSERT INTO policy_revisions (id, org_id, revision_id, name, policy_authz_id,"
    " serialized_object, last_updated_by) VALUES"
    " ($1, $2, $3, $4, $5, $6, $7)">>}.
 {list_policy_revisions_by_orgid_name,
  <<"SELECT revision_id"
    " FROM policy_revisions"
    " WHERE (name = $1 AND org_id = $2)">>}.
 {find_policy_revision_by_orgid_name_revision_id,
  <<"SELECT id, org_id, revision_id, name, policy_authz_id, serialized_object, last_updated_by"
    " FROM policy_revisions"
    " WHERE (name = $1 AND org_id = $2 AND revision_id = $3)">>}.
 {delete_policy_revision_by_id, <<"DELETE FROM policy_revisions WHERE id= $1">>}.

 {insert_policy_group_policy_revision_association,
  <<"INSERT INTO policy_revisions_policy_groups_association (id, org_id, policy_revision_revision_id, policy_revision_name,"
    " policy_group_name, policy_group_authz_id, last_updated_by) VALUES"
    " ($1, $2, $3, $4, $5, $6, $7)">>}.
 {update_policy_group_policy_revision_association,
  <<"UPDATE policy_revisions_policy_groups_association SET policy_revision_revision_id = $1, last_updated_by = $2
     WHERE id = $3">>}.
 {delete_policy_group_policy_revision_association_by_id,
  <<"DELETE FROM policy_revisions_policy_groups_association WHERE id = $1">>}.

 {find_policy_by_group_asoc_and_name,
  <<"SELECT g.id, g.org_id, g.policy_group_name, g.policy_group_authz_id, g.policy_revision_revision_id, g.policy_revision_name, r.policy_authz_id, r.serialized_object
       FROM policy_revisions_policy_groups_association AS g
  LEFT JOIN policy_revisions AS r ON (g.policy_revision_revision_id = r.revision_id)
      WHERE (g.org_id = $1 AND g.policy_group_name = $2 AND r.name = $3 )">>}.

 {find_client_name_in_authz_ids, <<"SELECT name, authz_id FROM clients WHERE authz_id = ANY($1)">>}.
 {find_client_authz_id_in_names, <<"SELECT authz_id FROM clients WHERE org_id = $1 AND name = ANY($2)">>}.
 {find_user_name_in_authz_ids, <<"SELECT username, authz_id FROM users WHERE authz_id = ANY($1)">>}.
 {find_user_authz_id_in_names, <<"SELECT authz_id FROM users WHERE username = ANY($1)">>}.
 {find_group_name_in_authz_ids, <<"SELECT name, authz_id FROM groups WHERE authz_id = ANY($1)">>}.
 {find_group_authz_id_in_names, <<"SELECT authz_id FROM groups WHERE org_id = $1 AND name = ANY($2)">>}.

  %% cookbook artifact versions
{insert_cookbook_artifact_version,
  <<"SELECT * FROM insert_cookbook_artifact_version($1, $2, $3, $4, $5, $6, $7, $8, $9)">>}.
{find_cookbook_artifact_version_by_org_name_identifier,
  <<"SELECT cav.id, cav.identifier, cav.metadata, cav.serialized_object, cav.created_at, cav.created_by,"
           "ca.org_id, ca.name, ca.authz_id, ARRAY_AGG(cavc.checksum) AS checksums "
    "FROM cookbook_artifact_versions AS cav "
    "JOIN cookbook_artifacts AS ca "
      "ON cav.cookbook_artifact_id = ca.id "
    "LEFT JOIN cookbook_artifact_version_checksums AS cavc "
      "ON cavc.cookbook_artifact_version_id = cav.id "
   "WHERE ca.org_id = $1 "
     "AND ca.name = $2 "
     "AND cav.identifier = $3 "
"GROUP BY cav.id, ca.org_id, ca.name, ca.authz_id">>}.

 {delete_cookbook_artifact_version_by_id, <<"SELECT * FROM delete_cookbook_artifact_version($1)">>}.

 {list_cookbook_artifacts_by_org_id,
   <<"SELECT ca.id, ca.org_id, ca.name, ca.authz_id, "
            "ARRAY_AGG(cav.identifier) AS version_identifiers "
     "FROM cookbook_artifact_versions AS cav "
     "JOIN cookbook_artifacts AS ca "
       "ON cav.cookbook_artifact_id = ca.id "
    "WHERE ca.org_id = $1 "
 "GROUP BY ca.id">>}.

{find_cookbook_artifact_by_org_id_name,
   <<"SELECT ca.id, ca.org_id, ca.name, ca.authz_id, "
            "ARRAY_AGG(cav.identifier) AS version_identifiers "
     "FROM cookbook_artifact_versions AS cav "
     "JOIN cookbook_artifacts AS ca "
       "ON cav.cookbook_artifact_id = ca.id "
    "WHERE ca.org_id = $1 "
      "AND ca.name = $2 "
 "GROUP BY ca.id">>}.

{check_cookbook_artifact_exists_by_authz_id,
  <<"SELECT authz_id "
      "FROM cookbook_artifacts "
     "WHERE authz_id = $1">>}.

%% $2 should be an array of checksums to check
%% then this query returns all checksums from there
%% that are referenced by cookbook artifact versions
{checksums_referenced_by_cookbook_artifact_versions,
   <<"SELECT checksum "
       "FROM cookbook_artifact_version_checksums "
      "WHERE org_id = $1 "
        "AND checksum = ANY($2) "
   "GROUP BY checksum">>}.
