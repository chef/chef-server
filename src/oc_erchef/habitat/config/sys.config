%% -*- mode: erlang -*-
%% -*- tab-width: 4;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ts=4 sw=4 ft=eruby.erlang et
[
    {kernel, [{inet_dist_use_interface, {127,0,0,1}}]},
    %% SASL config

    {sasl, [
        {sasl_error_logger, {file, "{{pkg.svc_var_path}}/logs/sasl-error.log"}},
        {errlog_type, error},
        {error_logger_mf_dir, "{{pkg.svc_var_path}}/logs"},      % Log directory
        {error_logger_mf_maxbytes, 104857600},
        {error_logger_mf_maxfiles, 10}
    ]},

    {lager, [
        {handlers, [
            {lager_console_backend, [info, {lager_default_formatter, [ "[", severity, "] ", message, "\n"]}]},
            {lager_file_backend, [
                {file, "{{pkg.svc_var_path}}/logs/erchef.log"},
                {level, info},
                {size, 104857600},
                {date, "$D0"},
                {count, 10},
                {formatter_config, [date, " ", time, " [", severity, "] ", message, "\n"]}
            ]}
        ]},

        %% Whether to write a crash log, and where.
        %% Commented/omitted/undefined means no crash logger.
        {crash_log, "{{pkg.svc_var_path}}/logs/crash.log"},

        %% Maximum size in bytes of events in the crash log - defaults to 65536
        {crash_log_msg_size, 65536},

        %% Maximum size of the crash log in bytes, before its rotated, set
        %% to 0 to disable rotation - default is 0
        {crash_log_size, 104857600},

        %% What time to rotate the crash log - default is no time
        %% rotation. See the lager README for a description of this format:
        %% https://github.com/basho/lager/blob/master/README.org
        {crash_log_date, "$D0"},

        %% Number of rotated crash logs to keep, 0 means keep only the
        %% current one - default is 0
        {crash_log_count, 10},

        %% Whether to redirect error_logger messages into lager - defaults to true
        {error_logger_redirect, true},

        %% Bump up the "high-water mark" (default 50), which is the
        %% number of messages per second allowed to come from
        %% error_logger.  This is the same as used by
        %% opscode-chef-mover, FWIW.
        {error_logger_hwm, 1000}
    ]},

                {chef_secrets, [
                 {provider, chef_secrets_env}
                ]},

                {darklaunch, [
               {config, "{{pkg.svc_data_path}}/dark_launch_features.json" },
               {reload_time, 10000 }
              ]},

    {oc_chef_wm, [
{{~#with cfg/oc_chef_wm}}
        {ip_mode, [ {{../cfg.private_chef.ip_mode}} ] },
        {api_version, "{{api_version}}" },
        {server_flavor, "cs" },

        {default_orgname, undefined },

        {ip, "{{listen_ip}}"},
        {port, {{port}} },
        {reqid_header_name, "X-Request-Id"},
        {auth_skew, {{auth_skew}} },
        %% currently only used by the search endpoint to bound
        %% how many nodes are deserialized at a time in
        %% preparing a response.
        {bulk_fetch_batch_size, {{bulk_fetch_batch_size}} },
        {superusers, [<<"pivotal">>]},
        %% metrics config
        {root_metric_key, "chefAPI"},

        {authz_timeout, 2000},
        {authz_fanout, 20},

        {reindex_batch_size, {{reindex_batch_size}} },

        {enable_actions, false},
        {actions_fqdn, <<"localhost">>},
        {ldap, []},
        %% these are used for reporting on license status on the
        %% license endpoint; it would have been nice to give these
        %% their own logical section, but erlang requires these to
        %% be part of a loaded application
        {node_license, {{node_license}} },
        {upgrade_url, <<"http://www.chef.io/contact/on-premises-simple">>},
        {max_request_size, {{max_request_size }} },
        {server_version, "{{server_version}}"},
        {health_ping_timeout, 400},
        {health_ping_modules, [
            oc_chef_authz,
            chef_sql,
            chef_elasticsearch
        ]},
        {base_resource_url, host_header},
        {strict_search_result_acls, {{strict_search_result_acls}} },

        {rabbitmq, [
            {management,[
                {user, "rabbitmgmt"},
                {port, 15672},
                % rabbitmq management http connection pool
                {rabbitmq_actions_management_service, [
                    {root_url, "https://127.0.0.1:15672/api"},
                    {timeout, 30000},
                    {init_count, 25},
                    {max_count, 100},
                    {cull_interval, {60, sec}},
                    {max_age, {70, sec}},
                    {max_connection_duration, {70, sec}},

                    {ibrowse_options, [
                        {connect_timeout, 10000}
                    ]}
                ]}
            ]},
            {monitoring, [
                {queue_length_monitor_enabled, false},
                {queue_length_monitor_vhost, "/analytics"},
                {queue_length_monitor_queue, "alaska"},
                {queue_length_monitor_millis, 30000},
                {queue_length_monitor_timeout_millis, 5000},
                {drop_on_full_capacity, true},
                {prevent_erchef_startup_on_full_capacity, false},
                {queue_at_capacity_affects_overall_status, false}
            ]}
        ]}
{{/with}}
    ]},

    {chef_authn, [
        {secrets_module, {chef_secrets, get, [{default, [<<"chef-server">>, <<"webui_pub_key">>]}]}},
        {keygen_cache_workers, {{cfg.chef_authn.keygen_cache_size}} },
        {keygen_cache_size, {{cfg.chef_authn.keygen_cache_size}} },
        {keygen_start_size, {{cfg.chef_authn.keygen_start_size}} },
        {keygen_timeout, {{cfg.chef_authn.keygen_timeout}} },
        {keygen_size, 2048}
    ]},

    {oc_chef_authz, [
{{#if bind.oc_bifrost ~}}
  {{#eachAlive bind.oc_bifrost.members as |member| ~}}
    {{#if @last ~}}
        {authz_root_url, "http://{{member.sys.ip}}:9463" },
        {authz_service, [
            {root_url, "http://{{member.sys.ip}}:9463" },
            {timeout, 2000},
            {init_count, 100},
            {max_count, 100},
            {queue_max, 200},
            {cull_interval, {1, min}},
            {max_age, {70, sec}},
            {max_connection_duration, {70, sec}},
            {ibrowse_options, [{connect_timeout, 5000}]}
        ]},
    {{/if ~}}
  {{/eachAlive ~}}
{{else ~}}
        {authz_root_url, "{{cfg.oc_bifrost_url}}" },
        {authz_service, [
            {root_url, "{{cfg.oc_bifrost_url}}" },
            {timeout, 2000},
            {init_count, 100},
            {max_count, 100},
            {queue_max, 200},
            {cull_interval, {1, min}},
            {max_age, {70, sec}},
            {max_connection_duration, {70, sec}},
            {ibrowse_options, [{connect_timeout, 5000}]}
        ]},
{{/if ~}}
        {cleanup_batch_size, 0}
    ]},

    {chef_db, [
        {bulk_fetch_batch_size, 5}
    ]},

%% need to revise if we want a rabbitmq
    {chef_index, [
        {ip_mode, [ ipv4 ] },
        {rabbitmq_host, "127.0.0.1"},
        {rabbitmq_port, 5672 },
        {rabbitmq_user, <<"chef">>},
        {rabbitmq_vhost, <<"/chef">>},
        {rabbitmq_exchange, <<"">>},
        {search_provider, elasticsearch},
        {search_queue_mode, batch},
        {search_batch_max_size, 5000000},
        {search_batch_max_wait, 10},
        {reindex_sleep_min_ms, 500},
        {reindex_sleep_max_ms, 2000},
        {reindex_item_retries, 3},
        {solr_elasticsearch_major_version, 5},
        {solr_service, [
{{#if bind.elasticsearch ~}}
  {{#eachAlive bind.elasticsearch.members as |member| ~}}
    {{#if @last ~}}
            {root_url, "http://{{member.sys.ip}}:{{member.cfg.http-port}}"},
    {{/if ~}}
  {{/eachAlive ~}}
{{else ~}}
            {root_url, "http://{{cfg.elasticsearch_url}}"},
{{/if ~}}
            {timeout, 30000},
            {init_count, 25},
            {max_count, 100},
            {cull_interval, {1, min}},
            {max_age, {70, sec}},
            {max_connection_duration, {70,sec}},
            {ibrowse_options, [{connect_timeout, 10000}]}
        ]},
        {rabbitmq_index_management_service, [
            {enabled, false}, %% disabled for now in habitat world
            {user, "rabbitmgmt"},
            {root_url, "https://127.0.0.1:15672/api"},
            {timeout, 30000},
            {init_count, 25},
            {max_count, 100},
            {cull_interval, {60, sec}},
            {max_age, {70, sec}},
            {max_connection_duration, {70, sec}},

            {ibrowse_options, [
                {connect_timeout, 10000}
            ]}
        ]}
    ]},

    {chef_objects, [
{{#if bind.bookshelf ~}}
  {{#eachAlive bind.bookshelf.members as |member| ~}}
    {{#if @last ~}}
        {s3_url, "http://{{member.sys.ip}}:{{member.cfg.port}}"},
    {{/if ~}}
  {{/eachAlive ~}}
{{else ~}}
        {s3_url, "http://bookshelf:4321"},
{{/if ~}}
        {s3_external_url, host_header},
        {s3_platform_bucket_name, "bookshelf"},
        {s3_url_ttl, 28800},
        {s3_url_expiry_window_size, {100, percent}},
        {s3_parallel_ops_timeout, 5000},
        {s3_parallel_ops_fanout, 10},
        {depsolver_timeout, 20000},
        {depsolver_pooler_timeout, 0}
    ]},
{{#if cfg.data_collector.enabled ~}}
    {data_collector, [
        {root_url,                "https://{{cfg.data_collector.server}}:{{cfg.data_collector.port}}/data-collector/v0/"},
        {timeout,                 30000},
        {init_count,              25},
        {max_count,               100},
        {cull_interval,           {1, min}},
        {max_age,                 {70, sec}},
        {max_connection_duration, {70,sec}},
        {ibrowse_options,         [{connect_timeout, 10000}]}
    ]},
{{/if ~}}
    {stats_hero, [
        {udp_socket_pool_size, 20 },
        {protocol, estatsd},
        {estatsd_host, "127.0.0.1"},
        {estatsd_port, 9466}
    ]},

    {opscoderl_httpc, [
        {pooler_timeout, 2000}
    ]},

    {sqerl, [
        {db_driver_mod, sqerl_pgsql_client},
        {ip_mode, [ ipv4 ] },
        %% {config_cb, {chef_secrets_sqerl, config, [{<<"opscode_erchef">>, <<"sql_password">>}]}},
        %% Database connection parameters
{{#if bind.database ~}}
  {{#eachAlive bind.database.members as |member| ~}}
    {{#if @last ~}}
          {db_host, "{{member.sys.ip}}"},
          {db_port, {{member.cfg.port}} },
          {db_user, "{{member.cfg.superuser_name}}"},
          {db_pass, "{{member.cfg.superuser_password}}" },
    {{/if ~}}
  {{/eachAlive ~}}
{{else ~}}
          {db_host, "{{cfg.database_host}}"},
          {db_port, 5432},
          {db_user, "hab"},
          {db_pass, "chefrocks" },
{{/if ~}}
        {db_name, "opscode_chef" },
        {idle_check, 10000},
        {pooler_timeout, 2000},
        {db_timeout, 5000},
        {prepared_statements, {oc_chef_sql, statements, [pgsql]}},
        {column_transforms, [
            {<<"created_at">>, {sqerl_transformers, convert_YMDHMS_tuple_to_datetime}},
            {<<"updated_at">>, {sqerl_transformers, convert_YMDHMS_tuple_to_datetime}}
        ]}
    ]},

    {webmachine, [
        {log_handlers, [
            {oc_wm_request_logger, [
                {file, "{{pkg.svc_var_path}}/logs/requests.log"},
                {file_size, 100},  %% Size in MB
                {files, 10},
                {annotations, [req_id, org_name, msg, darklaunch, perf_stats, user, req_api_version]}
            ]}
        ]}
    ]},

    {ibrowse, [
        {default_max_sessions, 256},
        {default_max_pipeline_size, 1}
    ]},

    {pooler, [
        {pools, [
{{~#with cfg/pooler/sqerl }}
            [{name, sqerl},
             {max_count, {{max_count}}},
             {init_count, {{init_count}} },
             {queue_max, {{queue_max}} },
             {start_mfa, {sqerl_client, start_link, []}}
            ],
{{~/with }}
{{~#with cfg/pooler/chef_depsolver }}
            [{name, chef_depsolver},
             {max_count, {{max_count}}},
             {init_count, {{init_count}} },
             {queue_max, {{queue_max}} },
             {start_mfa, {chef_depsolver_worker, start_link, []}}
            ]
{{~/with }}
        ]},
        {metrics_module, folsom_metrics}
    ]},
    {ssl, [
        {session_cb, noop_session_cache}
    ]}
].
