worker_processes 4;
error_log stderr;
# Enviroment variables that we wish to access while running must be declared here,
# otherwise they will not be available.
# env REDIS_PASSWORD; # Not used in habitat chef server
env DATA_COLLECTOR_TOKEN;
daemon off;

events {
  worker_connections 1024;
}

http {
  log_format opscode '$remote_addr - $remote_user [$time_local]  '
                    '"$request" $status "$request_time" $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" "$upstream_addr" "$upstream_status" "$upstream_response_time" "$http_x_chef_version" "$http_x_ops_sign" "$http_x_ops_userid" "$http_x_ops_timestamp" "$http_x_ops_content_hash" $request_length';

  server_names_hash_bucket_size 128;

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;

  keepalive_timeout 65;

  gzip on;
  gzip_http_version 1.0;
  gzip_comp_level 2;
  gzip_proxied any;
  gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript application/json;

  include {{pkgPathFor "chef-server/openresty-noroot"}}/nginx/conf/mime.types;

  ## TODO Maybe put this back into a subdir
  lua_package_path "{{pkg.svc_config_path}}/?.lua;$prefix/?.lua;;";
  lua_shared_dict maint_data 1m;
  lua_shared_dict banned_ips 1m;

  # Preload some shared modules globally
  init_by_lua '
--    redis = require("resty/redis") # Not used in habitat chef server
    config = require("config")
    routes = require("routes")
    resolver = require("resolver")
    route_checks = require("route_checks")
    validator = require("validator")

-- Habitat doesnt support redis based dark launch and ban for now
--   config.set_maint_refresh_interval(600)
--   config.set_ban_refresh_interval(600)
--   config.set_default_org(false)
  ';

  # Listen for local requests to the stub_status module.
  server {
    listen 127.0.0.1:9999;
    location /nginx_status {
      stub_status on;
      access_log   off;
      allow 127.0.0.1;
      deny all;
    }
  }

  upstream opscode_erchef {
    {{~#if bind.oc_erchef}}
    #  oc_erchef
       {{~#eachAlive bind.oc_erchef.members as |member|}}
         server {{ member.sys.ip}}:{{member.cfg.port}};
       {{~/eachAlive}}
    {{~/if}}
  }
  upstream oc_bifrost {
    {{~#if bind.oc_bifrost}}
    # oc_bifrost
       {{~#eachAlive bind.oc_bifrost.members as |member|}}
         server {{member.sys.ip}}:{{member.cfg.port}};
       {{~/eachAlive ~}}
    {{~/if}}
  }
  upstream opscode_solr4 {
    {{~#if bind.elasticsearch}}
       {{~#eachAlive bind.elasticsearch.members as |member|}}
         server {{member.sys.ip}}:{{member.cfg.http-port}};
       {{~/eachAlive}}
    {{~/if}}
  }
  upstream bookshelf {
    {{~#if bind.bookshelf}}
       {{~#eachAlive bind.bookshelf.members as |member|}}
         server {{member.sys.ip}}:{{member.cfg.port}};
       {{~/eachAlive}}
    {{~/if}}
  }
  upstream oc_id {
    {{#if bind.oc_id}}
       {{#eachAlive bind.oc_id.members as |member|}}
         server {{member.sys.ip}}:{{member.cfg.port}};
       {{/eachAlive}}
    {{/if}}
  }
{{#if bind.oc_erchef ~}}
  {{#eachAlive bind.oc_erchef.members as |member| ~}}
    {{#if @last ~}}
      {{#if member.cfg.data_collector_enabled ~}}
  upstream data-collector {
         server {{member.cfg.data_collector_server}}:{{member.cfg.data_collector_port}};
  }
      {{/if ~}}
    {{/if ~}}
  {{/eachAlive ~}}
{{/if ~}}

  # Include upstream definitions for addons
  # TODO HABITAT plugins not yet
  #  include /var/opt/opscode/nginx/etc/addon.d/*_upstreams.conf;

  fastcgi_temp_path "{{pkg.svc_data_path}}/tmp/fastcgi";
  client_body_temp_path "{{pkg.svc_data_path}}/tmp/client_body";
  uwsgi_temp_path "{{pkg.svc_data_path}}/tmp/uwsgi";
  scgi_temp_path "{{pkg.svc_data_path}}/tmp/scgi";

  # external lb config for Chef API
  proxy_cache_path  {{pkg.svc_data_path}}/cache/webui levels=1:2 keys_zone=webui-cache:50m max_size=5000m inactive=600m;
  proxy_cache_path  {{pkg.svc_data_path}}/cache/cookbooks levels=1:2 keys_zone=cookbooks:50m max_size=5000m inactive=600m;
  proxy_temp_path {{pkg.svc_data_path}}/cache-tmp;

  # We support three options: serve nothing on non_ssl_port (80),
  # redirect to https, or actually serve the API.
  #  server {
  #    listen 80;
  #    access_log {{pkg.svc_var_path}}/log/rewrite-port-80.log;
  #    return 301 https://$host$request_uri;
  #  }

  # Chef HTTPS API
  include {{pkg.svc_config_path}}/chef_http_lb.conf;
  include {{pkg.svc_config_path}}/chef_https_lb.conf;
}
