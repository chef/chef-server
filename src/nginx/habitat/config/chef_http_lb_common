 {{!-- This file is a partial and is only rendered because habitat doesn't know the difference --}}
# This portion comes from chef_http_lb_common via {{parent}}
  server {
    listen {{port}};
    server_name api.chef-server.dev;

    {{#if ../bind.chef-server-ctl ~}}
       {{#eachAlive ../bind.chef-server-ctl.members as |member| ~}}
         {{#if @last ~}}
    set_by_lua_block $data_collector_token {
        return "{{member.cfg.secrets.data_collector.token}}";
    }
         {{/if ~}}
       {{/eachAlive ~}}
    {{else ~}}
    set_by_lua $data_collector_token 'return os.getenv("DATA_COLLECTOR_TOKEN")';
    {{~/if}}

    access_log stdout opscode;
{{~#if is_ssl}}
    ssl on;
    ssl_certificate {{../pkg.svc_data_path}}/ca/{{../cfg.server_name}}.cert;
    ssl_certificate_key {{../pkg.svc_data_path}}/ca/{{../cfg.server_name}}.key;
    ssl_dhparam {{../pkg.svc_data_path}}/ca/dhparams.pem;

    ssl_session_timeout 5m;

    ssl_protocols {{../cfg.ssl_protocols}};
    ssl_ciphers {{../cfg.ssl_ciphers}};
    ssl_prefer_server_ciphers on;
{{~/if}}
    root {{../pkg.path}}/static/html;
    client_max_body_size 250m;

    proxy_set_header Host $http_host; # http_host preserves port # if present
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
{{~#if is_ssl}}
    proxy_set_header X-Forwarded-Proto https;
{{~else}}
    proxy_set_header X-Forwarded-Proto http;
{{~/if}}
    proxy_pass_request_headers on;
    proxy_connect_timeout   1;
    proxy_send_timeout      300;
    proxy_read_timeout      300;

    error_page 404 =404 /404.html;
    error_page 503 =503 /503.json;

    # Whitelist the docs necessary to serve up error pages and friendly
    # html to non-chef clients hitting this host.
    location ~ "^/[0-9]{3,3}\.(json|html)|favicon.ico|index.html$" {
    }
    location "/css/" {
    }
    location "/images/" {
    }

    location /version {
      types { }
      default_type text/plain;
      alias {{../pkg.svc_config_path}}/version-manifest.txt;
    }

    location ~ "^/organizations/([^/]+)/validate" {
      allow 127.0.0.1;
      allow ::1;
      deny all;
      proxy_pass http://opscode_erchef;
    }

{{#if ../bind.oc_erchef ~}}
  {{#eachAlive ../bind.oc_erchef.members as |member| ~}}
    {{#if @last ~}}
      {{#if member.cfg.data_collector_enabled ~}}
    location ~ "^/organizations/([^/]+)/data-collector$" {
      set $request_org $1;
      access_by_lua_block { validator.validate("POST") }
      proxy_set_header x-data-collector-token $data_collector_token;
      proxy_set_header x-data-collector-auth "version=1.0";
      rewrite ^ /data-collector/v0/ break;
      proxy_pass https://data-collector;
    }
      {{/if ~}}
    {{/if ~}}
  {{/eachAlive ~}}
{{~/if}}

    location ~ "^/organizations/([^/]+)/required_recipe$" {
      # This endpoint is unique because it is defined via nginx and is not
      # handled by an upstream like oc_erchef. In order to make responses
      # consistent between Chef server and chef-zero we'll always enable
      # the location but explicitly return a 404 when the feature is disabled,
      # rather than leave it undefined. If we were to leave it undefined any
      # non-signed requests would be routed to the main index page and return
      # a 200 instead of 404.
      return 404;
    }


    # bookshelf
    location ~ "^/bookshelf/organization-.+" {
      proxy_pass http://bookshelf;
    }

    # erchef status endpoint
    location ~ "^/_status/?$" {
      types { }
      default_type application/json;
      proxy_pass http://opscode_erchef;
    }

    # erchef stats endpoint
    location ~ "^/_stats/?$" {
      auth_basic "Chef Server Admin Stats";
      # HABITAT: CHECK maybe store in ring
      auth_basic_user_file {{../pkg.svc_config_path}}/stats_htpasswd;
      types { }
      default_type application/json;
      proxy_pass http://opscode_erchef;
    }

    # This variable is set to an empty string here so it can be used in
    # dispatch.lua later on. An add-on can set this variable to be used as an
    # upstream if we determine the request was not intended to go to the API.
    set $add_on_override_upstream "";

    # Include external routes for addons
    # HABITAT: NO ADDONS YET
    #    include /var/opt/opscode/nginx/etc/addon.d/*_external.conf;

    # oc-id
    include {{../pkg.svc_config_path}}/oc-id-external.conf;

    location /_route/ {
      default_type 'application/json';
      content_by_lua_file '{{../pkg.svc_config_path}}/dispatch_route.lua';
    }

    location / {
      satisfy any;


      set $mode "api";
      set $upstream "";
      rewrite_by_lua_file '{{../pkg.svc_config_path}}/dispatch.lua';
      proxy_pass http://$upstream;
      proxy_redirect http://$upstream /;
    }
  }
