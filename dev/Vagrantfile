# -*- mode: ruby -*-
# vi: set ft=ruby


require "yaml"
CS_VM_ADDRESS="192.168.33.100"
DB_VM_ADDRESS="192.168.33.150"
DB_SUPERUSER="bofh"
DB_SUPERPASS="i1uvd3v0ps"
CS_VM_2_ADDRESS="192.168.33.101"

Vagrant.configure("2") do |config|
  attributes = load_settings
  # Use the official Ubuntu 14.04 box
  # Vagrant will auto resolve the url to download from Atlas
  config.vm.box = "ubuntu/trusty64"
  config.ssh.forward_agent = true

  if attributes['vm']['postgresql']['start']
    config.vm.define("database") do |c|
      define_db_server(c, attributes)
    end
  end
  config.vm.define("chef-server", primary: true) do |c|
    define_chef_server(c, attributes)
  end
  config.vm.define("chef-server-node") do |c|
    define_chef_server(c, attributes, true)
  end
end


def define_chef_server(config, attributes, secondary = false)
  # Ugh come back to this - don'tprompt twice!
  provisioning, installer, installer_path = prepare()

  if secondary
    ip = CS_VM_2_ADDRESS
    host = "node.chef-server.dev"
    mem = 2048
    cpus = 2
  else
    ip = CS_VM_ADDRESS
    host = "api.chef-server.dev"
    mem = attributes["vm"]["memory"]
    cpus = attributes["vm"]["cpus"]
  end

  config.vm.hostname = host
  config.vm.network "private_network", ip: ip
  config.vm.provider :virtualbox do |vb|
    vb.customize ["modifyvm", :id,
                  "--name", host,
                  "--memory", mem,
                  "--cpus", cpus,
                  "--usb", "off",
                  "--usbehci", "off"
    ]
  end

  if provisioning
    json = {
      "packages" => attributes["vm"]["packages"],
      "tz" => host_timezone,
      "omnibus-autoload" => attributes["vm"]["omnibus-autoload"],
      "dvm" => {}
    }.merge attributes["vm"]["node-attributes"]

    json['dvm']['no-reconfigure'] = true if secondary
    if attributes["vm"]["postgresql"]["start"] and attributes["vm"]["postgresql"]["use-external"]
      # TODO make this stuff common - we have these values in 2-3 places now...
      pg = { "postgresql['external']" => true,
             "postgresql['vip']" => "\"#{DB_VM_ADDRESS}\"",
             "postgresql['port']" => 5432,
             "postgresql['db_superuser']" => "\"#{DB_SUPERUSER}\"",
             "postgresql['db_superuser_password']" => "\"#{DB_SUPERPASS}\"",
             "opscode_erchef['db_pool_size']" => 10,
             "oc_id['db_pool_size']" => 10,
             "oc_bifrost['db_pool_size']" => 10 }
      # TODO merge with other options nicely.
      json = simple_deep_merge(json, { "provisioning" => { "chef-server-config" => pg } })
    end
    config.vm.synced_folder File.absolute_path(File.join(Dir.pwd, "../")), "/host",
      type: "rsync",
      rsync__args: ["--verbose", "--archive", "--delete", "-z", "--no-owner", "--no-group" ],
      rsync__exclude: attributes["vm"]["sync-exclude"]
    # We're also going to do a share of the slower vboxsf style, allowing us to auto-checkout dependencies
    # and have them be properly synced to a place that we can use them.
    config.vm.synced_folder installer_path, "/installers"
    config.vm.provision "file", source: "~/.gitconfig", destination: ".gitconfig"
    config.vm.provision "shell", inline: install_hack(installer)
    config.vm.provision "chef_solo" do |chef|
      chef.install = false
      chef.binary_path = "/opt/opscode/embedded/bin"
      chef.node_name = config.vm.hostname
      chef.cookbooks_path = "cookbooks"
      chef.add_recipe("provisioning::default")
      chef.add_recipe("provisioning::chef-server") unless secondary
      chef.add_recipe("dev::dvm")
      chef.add_recipe("dev::system")
      chef.add_recipe("dev::user-env")
      chef.json = json || {}
    end
  end
end

def define_db_server(config, attributes)
  config.vm.hostname = "database.chef-server.dev"
  config.vm.network "private_network", ip: DB_VM_ADDRESS
  config.vm.provider :virtualbox do |vb|
    vb.customize ["modifyvm", :id,
                  "--name", "database",
                  # For basic pedant tests, we're not putting
                  # a lot of load on this:
                  "--memory", 512,
                  "--cpus", 1,
                  "--usb", "off",
                  "--usbehci", "off"
    ]
  end

  # Using shell here to ave the trouble of downloading
  # chef-client for the node.  May reconsider...
  config.vm.provision "shell", inline: configure_postgres
end


##############
# Internals
##############
# These functions are used for provisioning, and ensuring that the VM has
# what it needs to load up and install chef-server
##############


def load_settings
  attributes = YAML.load_file("defaults.yml")
  begin
    custom_attributes = YAML.load_file("config.yml")
    attributes = simple_deep_merge(attributes, custom_attributes)
  rescue
  end
  attributes
end

def prepare
  action = ARGV[0]
  if action =~ /^(provision|up|reload)$/
    installer = prompt_installer
    raise "Please set INSTALLER to the path of a .deb package for Chef Server 12+." if installer.nil?
    raise "#{installer} does not exist! Please fix this." unless File.file?(installer)
    installer_path = File.dirname(File.expand_path(installer))
    provisioning = true
  end
  [provisioning, installer, installer_path]
end

def prompt_installer
  puts "Looking in #{Dir.home}/Downloads and #{base_path}/omnibus/pkg for installable chef-server-core package."
  # TODO allow config override of location, multiple locations, search pattern, max count?
  files = Dir.glob("#{Dir.home}/Downloads/chef-server-core*.deb") + Dir.glob("#{base_path}/omnibus/pkg/chef-server-core*.deb")

  if ENV['INSTALLER']
    if ENV['INSTALLER'] =~ /^.*chef-server-core.*deb$/ and File.file?(ENV['INSTALLER'])
      user_installer = File.expand_path(ENV['INSTALLER'])
    else
      puts "INSTALLER #{ENV['INSTALLER']} is not a valid chef-server-core package. Ignoring."
    end
  end

  if files.length == 0 and not user_installer
    return nil
  end

  files = files.sort_by{ |f| File.mtime(f) }.last(10)
  files.reverse!
  files << "[INSTALLER]: #{user_installer}" if user_installer
  cur = 1
  files.each do |f|
    puts " #{cur}) #{f}\n"
    cur = cur + 1
  end

  selection = 0

  loop do
    print "Select an image, or set the INSTALLER variable and run again: [1 - #{files.length}]: "
    selection = $stdin.gets.chomp.to_i
    break if selection > 0 and selection <= files.length
  end

  if selection == files.length  and user_installer
    user_installer # we munged the text on this one
  else
    files[selection - 1]
  end

end

def host_timezone
  require "time"
  # Note that we have to reverse the offset sign if we're using Etc/GMT,
  # reference: http://en.wikipedia.org/wiki/Tz_database#Area
  #  offset = (Time.zone_offset(Time.now.zone) / 3600) * -1
  #  zonesuffix = offset >= 0 ? "+#{offset.to_s}" : "#{offset.to_s}"
  #  "Etc/GMT#{zonesuffix}"
  #  Sigh - sqitch doesn't like the above format and dies.
  if /darwin/ =~ RUBY_PLATFORM
    host_timezone_osx
  else # TODO windows if we otherwise check out for windows.
    host_timezone_linux
  end
end

def host_timezone_linux
  File.read("/etc/timezone").chomp
end

def host_timezone_osx
  if File.exists?(".cached_tz")
    puts "Reading timezone from cache(.cached_tz)"
    File.read(".cached_tz")
  else
    puts "Notice: using sudo to get timezone, no updates being made"
    puts "Executing: sudo systemsetup -gettimezone"
    # Time Zone: Blah/Blah
    tz = `sudo systemsetup -gettimezone`.chomp.split(":")[1].strip
    File.write(".cached_tz", tz)
    tz
  end
end



# this is here in order to avoid having to download a chef provisioner -
# we already have a chef-client install included with the server package, and since
# we're going to run in solo mode, it will run for VM provisioning without
# interfering with the server install.
def install_hack(installer)
  server_installer_name = File.basename(installer)
  return ";" if server_installer_name.nil?
<<SCRIPT
cp /home/vagrant/.gitconfig /root/.gitconfig
if [ -d "/opt/opscode/embedded" ]
then
  echo "Bypassing server install, it appears done."
else
  echo "PATH=/opt/opscode/embedded/bin:$PATH" > /root/.bashrc
  sudo dpkg -i "/installers/#{server_installer_name}"
fi
SCRIPT
end

# Quick and dirty postgres configuration that avoids having to download
# a chef installer when we bring a box up.
def configure_postgres
<<BASH
echo "deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main" > /etc/apt/sources.list.d/pgdg.list
wget --quiet https://www.postgresql.org/media/keys/ACCC4CF8.asc
apt-key add ACCC4CF8.asc
apt-get update
apt-get install postgresql-9.2 -y
echo "host    all             all             #{CS_VM_ADDRESS}/32         md5" >> /etc/postgresql/9.2/main/pg_hba.conf
echo "listen_addresses='*'" >> /etc/postgresql/9.2/main/postgresql.conf
service postgresql restart
export PATH=/usr/lib/postgresql/9.2/bin:$PATH
sudo -u postgres psql -c "CREATE USER bofh SUPERUSER ENCRYPTED PASSWORD 'i1uvd3v0ps';"
BASH
end

def base_path
  File.absolute_path(File.join(Dir.pwd, "../"))
end

def simple_deep_merge(source_hash, new_hash)
  source_hash.merge(new_hash) do |key, old, new|
    if new.respond_to?(:blank) && new.blank?
      old
    elsif (old.kind_of?(Hash) and new.kind_of?(Hash))
        simple_deep_merge(old, new)
    elsif (old.kind_of?(Array) and new.kind_of?(Array))
        old.concat(new).uniq
    else
       new
    end
  end
end
